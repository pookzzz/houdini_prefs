{"type": "root", "attrs": {"index": "no", "flow": "index#chapters"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": [{"type": "supertitle", "text": ["Karma User Guide"]}, " Prim to pixel"], "extent": [0, 38]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [72, 81], "body": [{"type": "para", "indent": 4, "text": ["Work in progress. Expect information and images to update periodically while this notice is present."], "extent": [81, 188]}], "container": true}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [188, 203], "body": [{"type": "para", "indent": 0, "text": ["This chapter is an overview of how a scene is rendered with Solaris. It explains how prims in USD are composed, what Hydra does, and what happens when the scene data makes it to Karma."], "extent": [203, 390]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [390, 395], "body": [{"type": "para", "indent": 8, "text": ["While this guide is focused on Karma, the process up until Karma is mostly the same for any Hydra render delegate."], "extent": [395, 520]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["USD"], "extent": [520, 530], "body": [{"type": "para", "indent": 0, "text": ["When rendering USD scenes, they are first loaded and composed into a ", {"scheme": null, "value": "glossary#stage", "type": "link", "text": ["stage"], "fullpath": "/solaris/kug/glossary.html#stage", "fragment": "#stage"}, ". Loading a stage involves following USD\u2019s complex set of possible relationships between prims (known as ", {"type": "em", "text": ["arcs"]}, ")."], "extent": [530, 738]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Composition"], "extent": [738, 758], "body": [{"type": "para", "indent": 0, "text": ["Using a complex process (see ", {"scheme": null, "value": "/solaris/usd#compose", "type": "link", "text": ["USD composition"], "fullpath": "/solaris/usd.html#compose", "fragment": "#compose"}, ", USD assemblies all of the layers and loads all of the prims contributing to the stage."], "extent": [758, 916]}, {"type": "para", "indent": 0, "text": ["In our example scene, the ", {"type": "code", "text": ["scene.usda"]}, " file defines several lights, render settings, and also has two ", {"type": "em", "text": ["references"]}, " to the ", {"type": "code", "text": ["teapot"]}, " layer. References allow you to share and reuse data, rather than storing it in multiple places on disk."], "extent": [916, 1152]}, {"type": "para", "indent": 0, "text": ["The teapot\u2019s color is green in the original model, but one of the references has a different color ", {"type": "em", "text": ["overlayed"]}, "."], "extent": [1152, 1266]}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Value resolution"], "extent": [1266, 1291], "body": [{"type": "para", "indent": 0, "text": ["Primitives and property compositions are cached, and the process of giving a final value for some property to the renderer is called ", {"type": "em", "text": ["value resolution"]}, "."], "extent": [1291, 1446]}, {"type": "para", "indent": 0, "text": ["For our little scene, the resolved values are mostly straightforward. Only the color of the teapots varies between each reference."], "extent": [1446, 1579]}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Hydra"], "extent": [1579, 1591], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Syncing primitives"], "extent": [1591, 1619], "body": [{"type": "para", "indent": 0, "text": ["The process by which composed prims are make their way from USD into a render delegate is called ", {"type": "q", "text": ["syncing"]}, ". This process happens in parallel."], "extent": [1619, 1763]}, {"type": "para", "indent": 0, "text": ["BPrims are synced first, but SPrims and RPrims are synced at the same time."], "extent": [1763, 1841]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 0, "text": ["BPrims"], "extent": [1841, 1858], "body": [{"type": "para", "indent": 0, "text": ["BPrims are ", {"type": "q", "text": ["buffer"]}, " prims, such as textures and render settings. These are synced first."], "extent": [1858, 1949]}, {"type": "para", "indent": 0, "text": ["The texture map of our dome light, and the checker map of the grid, are both created as buffers, and sent over to Karma."], "extent": [1949, 2072]}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 0, "text": ["SPrims"], "extent": [2072, 2089], "body": [{"type": "para", "indent": 0, "text": ["SPrims are ", {"type": "q", "text": ["state"]}, " prims, such as materials, lights, and cameras. These prims are not directly drawn."], "extent": [2089, 2193]}, {"type": "para", "indent": 0, "text": ["The materials of our teapot produce a material network in Hydra, and sent to Karma. The dome light and area light are also sent over to Karma."], "extent": [2193, 2338]}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 0, "text": ["RPrims"], "extent": [2338, 2355], "body": [{"type": "para", "indent": 0, "text": ["RPrims are directly rendered prims, such as points, meshes, and curves (gprims). RPrims on the USD side have code that defines how they are represented in Hydra."], "extent": [2355, 2519]}, {"type": "para", "indent": 0, "text": ["In our scene, the grid mesh is sent through Hydra to Karma, as are the prims for the teapot\u2019s spout, handle, lid, and base. Hydra doesn\u2019t see the intermediate xform prims from USD, it only sends over the directly-renderable meshes."], "extent": [2519, 2753]}]}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Karma"], "extent": [2753, 2765], "body": [{"type": "para", "indent": 0, "text": ["After Karma has received all of the synced primitives, it builds up any acceleration structures it needs."], "extent": [2765, 2874]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Primary samples"], "extent": [2874, 2898], "body": [{"type": "para", "indent": 0, "text": ["Karma begins sending out primary samples for each pixel of the render."], "extent": [2898, 2972]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Pixel oracle"], "extent": [2972, 2995], "body": []}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Secondary samples"], "extent": [2995, 3022], "body": []}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Image filters"], "extent": [3022, 3045], "body": []}]}], "title": [{"type": "supertitle", "text": ["Karma User Guide"]}, " Prim to pixel"]}