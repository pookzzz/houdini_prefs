{"type": "root", "attrs": {"type": "include"}, "body": [{"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["opinput"]}, "role": "item", "extent": [423, 437], "body": [{"type": "para", "indent": 4, "text": ["The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on."], "extent": [463, 585]}], "container": true, "attrs": {"id": "opinput_arg"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["opinput"]}, "role": "item", "extent": [585, 599], "body": [{"type": "para", "indent": 4, "text": ["The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on."], "extent": [630, 756]}, {"type": "para", "indent": 4, "text": ["If you specify ", {"type": "code", "text": ["-1"]}, ", the function uses the current CHOP node or input ", {"type": "code", "text": ["0"]}, " if it is connected."], "extent": [756, 855]}], "container": true, "attrs": {"id": "chop_opinput_arg"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["geometry"]}, "role": "item", "extent": [855, 870], "body": [{"type": "para", "indent": 4, "text": ["A string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [900, 1053]}], "container": true, "attrs": {"id": "geometry_output"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["geohandle"]}, "role": "item", "extent": [1053, 1069], "body": [{"type": "para", "indent": 4, "text": ["A handle to the geometry to write to. Currently the only valid value is ", {"type": "code", "text": ["0"]}, " or ", {"scheme": "Vex", "value": "/vex/functions/geoself", "type": "link", "text": "", "fallback_text": "geoself()", "fullpath": "/vex/functions/geoself.html"}, ", which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)"], "extent": [1097, 1320]}], "container": true, "attrs": {"id": "geohandle_arg"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribclass"]}, "role": "item", "extent": [1320, 1338], "body": [{"type": "para", "indent": 4, "text": ["One of ", {"type": "code", "text": ["\"detail\""]}, " (or ", {"type": "code", "text": ["\"global\""]}, "), ", {"type": "code", "text": ["\"point\""]}, ", ", {"type": "code", "text": ["\"prim\""]}, ", or ", {"type": "code", "text": ["\"vertex\""]}, "."], "extent": [1371, 1447]}], "container": true, "attrs": {"id": "attribclassnogroup"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribclass"]}, "role": "item", "extent": [1447, 1465], "body": [{"type": "para", "indent": 4, "text": ["One of ", {"type": "code", "text": ["\"detail\""]}, " (or ", {"type": "code", "text": ["\"global\""]}, "), ", {"type": "code", "text": ["\"point\""]}, ", ", {"type": "code", "text": ["\"prim\""]}, ", or ", {"type": "code", "text": ["\"vertex\""]}, "."], "extent": [1491, 1571]}, {"type": "para", "indent": 4, "text": ["You can also use ", {"type": "code", "text": ["\"primgroup\""]}, ", ", {"type": "code", "text": ["\"pointgroup\""]}, " or ", {"type": "code", "text": ["\"vertexgroup\""]}, " to ", {"scheme": null, "value": "/vex/groups", "type": "link", "text": ["read from groups"], "fullpath": "/vex/groups.html"}, "."], "extent": [1571, 1677]}], "container": true, "attrs": {"id": "attribclass"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribute_name"]}, "role": "item", "extent": [1677, 1698], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute to read."], "extent": [1730, 1770]}], "container": true, "attrs": {"id": "attribnamenogroup"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribute_name"]}, "role": "item", "extent": [1770, 1791], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute (or intrinsic) to read."], "extent": [1816, 1871]}], "container": true, "attrs": {"id": "attribname"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["elemnum"]}, "role": "item", "extent": [1871, 1885], "body": [{"type": "para", "indent": 4, "text": ["The point/primitive/vertex number to read the attribute value from. For detail attributes, use ", {"type": "code", "text": ["0"]}, " here (the argument is ignored for detail attributes)."], "extent": [1907, 2069]}, {"type": "para", "indent": 4, "text": ["To get the linear vertex number given a primitive number and the vertex number on the primitive, use the ", {"scheme": "Vex", "value": "/vex/functions/primvertex", "type": "link", "text": "", "fallback_text": "primvertex()", "fullpath": "/vex/functions/primvertex.html"}, " function."], "extent": [2069, 2206]}], "container": true, "attrs": {"id": "elemnum"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["intrinsic_name"]}, "role": "item", "extent": [2206, 2227], "body": [{"type": "para", "indent": 4, "text": ["The name of the intrinsic to read. For example, ", {"type": "code", "text": ["\"pointattributes\""]}, ", ", {"type": "code", "text": ["\"pointcount\""]}, ", or ", {"type": "code", "text": ["\"bounds\""]}, "."], "extent": [2255, 2360]}], "container": true, "attrs": {"id": "intrinsicname"}}], "container": true, "role": "item_group"}, {"ext": null, "type": "null", "indent": 0, "role": "item", "extent": [2360, 2367], "body": [{"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"none\""]}, " "], "role": "td", "extent": [2404, 2419], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2419, 2444]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"point\""]}, " "], "role": "td", "extent": [2444, 2460], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations."], "extent": [2460, 2514]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"hpoint\""]}, " "], "role": "td", "extent": [2514, 2531], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations to this vector4."], "extent": [2531, 2601]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"vector\""]}, " "], "role": "td", "extent": [2601, 2618], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales and rotations, but not transformations."], "extent": [2618, 2679]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"normal\""]}, " "], "role": "td", "extent": [2679, 2696], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply rotations, apply scales with inverse-transpose."], "extent": [2696, 2758]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"color\""]}, " "], "role": "td", "extent": [2758, 2774], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2774, 2799]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"matrix\""]}, " "], "role": "td", "extent": [2799, 2816], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations to this matrix."], "extent": [2816, 2885]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"quaternion\""]}, " "], "role": "td", "extent": [2885, 2906], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply rotations."], "extent": [2906, 2931]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"indexpair\""]}, " "], "role": "td", "extent": [2931, 2951], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2951, 2976]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"integer\""]}, " "], "role": "td", "extent": [2976, 2994], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Do not blend this value when points are averaged."], "extent": [2994, 3052]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"integer-blend\""]}, " "], "role": "td", "extent": [3052, 3076], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Integer values that blend when points are averaged."], "extent": [3076, 3136]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"texturecoord\""]}, " "], "role": "td", "extent": [3136, 3159], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform, and try to preserve seams when interpolating.\n        Attributes with this type will show up in the UV viewport menu."], "extent": [3159, 3303]}]}], "divider": false}]}], "container": true, "attrs": {"id": "attrib_typeinfo_values"}}, {"ext": null, "type": "null", "indent": 0, "role": "item", "extent": [3303, 3310], "body": [{"type": "para", "indent": 4, "text": ["Returns the value of ", {"type": "code", "text": ["geohandle"]}, " on success or ", {"type": "code", "text": ["-1"]}, " on failure."], "extent": [3340, 3413]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [3413, 3423], "body": [{"type": "para", "indent": 8, "text": ["If the attribute does not exist, this function ", {"type": "strong", "text": ["creates the attribute"]}, " with a default value of zero, empty string, or an empty array.\n        If you want to control the default value of a numeric attribute, use ", {"scheme": "Vex", "value": "/vex/functions/addattrib", "type": "link", "text": "", "fallback_text": "addattrib()", "fullpath": "/vex/functions/addattrib.html"}, " before setting the attribute."], "extent": [3423, 3689]}, {"type": "para", "indent": 8, "text": ["If the attribute does not already exist, its type info is automatically set for attributes with ", {"scheme": null, "value": "/vex/snippets#known", "type": "link", "text": ["standard names"], "fullpath": "/vex/snippets.html#known", "fragment": "#known"}, " such as ", {"type": "code", "text": ["Cd"]}, " and ", {"type": "code", "text": ["orient"]}, ".\n        If you want to control the type info of a numeric attribute, use ", {"scheme": "Vex", "value": "/vex/functions/setattribtypeinfo", "type": "link", "text": "", "fallback_text": "setattribtypeinfo()", "fullpath": "/vex/functions/setattribtypeinfo.html"}, " before setting the attribute."], "extent": [3689, 3985]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "set_attrib_info"}}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["mode"]}, "role": "item", "extent": [3985, 3996], "body": [{"type": "para", "indent": 4, "text": ["(Optional) if given, this controls how the function modifies any existing value in the attribute."], "extent": [4026, 4129]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"set\""]}, " "], "role": "td", "extent": [4129, 4143], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Overwrite the attribute with the given value."], "extent": [4143, 4197]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"add\""]}, " "], "role": "td", "extent": [4197, 4211], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Add to the attribute the value."], "extent": [4211, 4251]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"min\""]}, ", ", {"type": "code", "text": ["\"minimum\""]}, " "], "role": "td", "extent": [4251, 4278], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Set the attribute to the minimum of itself and the value."], "extent": [4278, 4344]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"max\""]}, ", ", {"type": "code", "text": ["\"maximum\""]}, " "], "role": "td", "extent": [4344, 4371], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Set the attribute to the maximum of itself and the value."], "extent": [4371, 4437]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"mult\""]}, ", ", {"type": "code", "text": ["\"multiply\""]}, " "], "role": "td", "extent": [4437, 4466], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise."], "extent": [4466, 4592]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"toggle\""]}, " "], "role": "td", "extent": [4592, 4609], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Toggles the attribute, independent of the source value.  Useful for toggling group membership."], "extent": [4609, 4712]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"append\""]}, " "], "role": "td", "extent": [4712, 4729], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Valid for string, dict, and array attributes.  For strings and\n        arrays, appends the source value to the end of the original\n        value.  For dictionaries, updates the original dictionary with\n        the source dictionary, replacing any matching keys."], "extent": [4729, 5000]}]}], "divider": false}]}], "container": true, "attrs": {"id": "set_attrib_mode"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["linearvertex"]}, "role": "item", "extent": [5000, 5019], "body": [{"type": "para", "indent": 4, "text": ["The linear index of a vertex.\n    If you have a point number and point vertex number, you can use ", {"scheme": "Vex", "value": "/vex/functions/vertexindex", "type": "link", "text": "", "fallback_text": "vertexindex()", "fullpath": "/vex/functions/vertexindex.html"}, " to convert them to a linear index."], "extent": [5046, 5202]}], "container": true, "attrs": {"id": "linearvertex"}}, {"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<stage>"]}], "role": "item", "extent": [5202, 5218], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle LOP), this argument can be an integer representing the input number (starting at 0) to read the stage from. The integer is equivalent to the string form referencing a particular input, e.g., ", {"type": "q", "text": ["opinput:0"]}, "."], "extent": [5242, 5508]}, {"type": "para", "indent": 4, "text": ["You can also use this argument to refer to a USD file (e.g., ", {"type": "q", "text": ["/path/to/file.usd"]}, "), or to another LOP node\u2019s cooked stage using the ", {"type": "code", "text": ["op:"]}, " as the path prefix (e.g., ", {"type": "q", "text": ["op:/stage/lop_node"]}, ")."], "extent": [5508, 5700]}], "container": true, "attrs": {"id": "usd_stage"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["stagehandle"]}, "role": "item", "extent": [5700, 5718], "body": [{"type": "para", "indent": 4, "text": ["A handle to the stage to write to. Currently the only valid value is ", {"type": "code", "text": ["0"]}, ", which means the current stage in a node. (This argument may be used in the future to allow writing to other stages.)"], "extent": [5748, 5944]}], "container": true, "attrs": {"id": "usd_stagehandle"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["path"]}, "role": "item", "extent": [5944, 5955], "body": [{"type": "para", "indent": 4, "text": ["The path to the object. I.e, a primitive, an attribute, or a relationship."], "extent": [5978, 6058]}], "container": true, "attrs": {"id": "usd_path"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["primpath"]}, "role": "item", "extent": [6058, 6073], "body": [{"type": "para", "indent": 4, "text": ["The path to the primitive."], "extent": [6100, 6132]}], "container": true, "attrs": {"id": "usd_primpath"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["collectionpath"]}, "role": "item", "extent": [6132, 6153], "body": [{"type": "para", "indent": 4, "text": ["The path to the collection."], "extent": [6186, 6219]}], "container": true, "attrs": {"id": "usd_collectionpath"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["name"]}, "role": "item", "extent": [6219, 6230], "body": [{"type": "para", "indent": 4, "text": ["The metadata name."], "extent": [6261, 6285]}, {"type": "para", "indent": 4, "text": ["The name can be namespaced to acces values inside (possibly nested) VtDictionaries, such as custom data dictionary, e.g., ", {"type": "q", "text": ["customData:name"]}, " or ", {"type": "q", "text": ["customData:name:subname"]}, ". For non-namespaced names, the object schema needs to declare a given metadata for it to be accessible, e.g., ", {"type": "q", "text": ["active"]}, " or ", {"type": "q", "text": ["documentation"]}, "."], "extent": [6285, 6598]}], "container": true, "attrs": {"id": "usd_metadataname"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["timecode"]}, "role": "item", "extent": [6598, 6613], "body": [{"type": "para", "indent": 4, "text": ["The USD time code at which to evaluate the attribute. A USD time code roughly corresponds to a frame in Houdini. If not given, the time code corresponding to the current frame is used."], "extent": [6640, 6830]}], "container": true, "attrs": {"id": "usd_timecode"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["suffix"]}, "role": "item", "extent": [6830, 6843], "body": [{"type": "para", "indent": 4, "text": ["The transform operation suffix."], "extent": [6871, 6908]}, {"type": "para", "indent": 4, "text": ["USD primitives are transformed in space by a series of transform operations whose full names are sequentially listed in the ", {"type": "code", "text": ["xformOpOrder"]}, " attribute.  Full names are namespaced, encode the operation transform type (e.g., translation or rotation), and can also contain a suffix. If primitive has a few operations of the same type, it\u2019s necessary to specify the suffix to differentiate between them. This parameter specifies such a suffix."], "extent": [6908, 7351]}], "container": true, "attrs": {"id": "usd_xformopsuffix"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["scale_inherit_mode"]}, "role": "item", "extent": [7351, 7376], "body": [{"type": "para", "indent": 4, "text": ["Specifies how scale inheritance from the parent transform is applied to the result. It is one of the following defines from ", {"type": "code", "text": ["math.h"]}, ":"], "extent": [7405, 7543]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_DEFAULT"]}, " (0) - simple inheritance:"], "extent": [7543, 7599], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = local * parent_world\n      "], "extent": [7599, 7654]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_OFFSET_ONLY"]}, " (1) - child doesn\u2019t scale with the parent local scales, but local translation is scaled:"], "extent": [7654, 7777], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = local_scale_rotates * invert(parent_local_scales) * local_translates * parent_world\n      "], "extent": [7777, 7895]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_OFFSET_AND_SCALE"]}, " (2) - local translation is scaled as before but parent local scaling is also reapplied by the child in local space:"], "extent": [7895, 8050], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = parent_local_scales * local_scale_rotates * invert(parent_local_scales) * T * parent_world\n      "], "extent": [8050, 8175]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_SCALE_ONLY"]}, " (3) - local translation is not scaled, but parent local scaling is reapplied by the child in local space:"], "extent": [8175, 8314], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = parent_local_scales * local * invert(parent_local_scales) * parent_world\n      "], "extent": [8314, 8421]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_IGNORE"]}, " (4) - child completely ignores any parent local scaling:"], "extent": [8421, 8507], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = local * invert(parent_local_scales) * parent_world\n      "], "extent": [8507, 8592]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "scale_inherit_mode"}}], "container": true, "role": "item_group"}, {"ext": null, "type": "null", "indent": 0, "role": "item", "extent": [8592, 8600], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": null, "value": "/vex/random", "type": "link", "text": "", "fullpath": "/vex/random.html"}], "extent": [8621, 8641]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/anoise", "type": "link", "text": "", "fallback_text": "anoise()", "fullpath": "/vex/functions/anoise.html"}], "extent": [8641, 8660]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/curlnoise", "type": "link", "text": "", "fallback_text": "curlnoise()", "fullpath": "/vex/functions/curlnoise.html"}], "extent": [8660, 8682]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/flownoise", "type": "link", "text": "", "fallback_text": "flownoise()", "fullpath": "/vex/functions/flownoise.html"}], "extent": [8682, 8704]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/noise", "type": "link", "text": "", "fallback_text": "noise()", "fullpath": "/vex/functions/noise.html"}], "extent": [8704, 8722]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/onoise", "type": "link", "text": "", "fallback_text": "onoise()", "fullpath": "/vex/functions/onoise.html"}], "extent": [8722, 8741]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/pnoise", "type": "link", "text": "", "fallback_text": "pnoise()", "fullpath": "/vex/functions/pnoise.html"}], "extent": [8741, 8760]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/snoise", "type": "link", "text": "", "fallback_text": "snoise()", "fullpath": "/vex/functions/snoise.html"}], "extent": [8760, 8779]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/vnoise", "type": "link", "text": "", "fallback_text": "vnoise()", "fullpath": "/vex/functions/vnoise.html"}], "extent": [8779, 8798]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/wnoise", "type": "link", "text": "", "fallback_text": "wnoise()", "fullpath": "/vex/functions/wnoise.html"}], "extent": [8798, 8817]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/xnoise", "type": "link", "text": "", "fallback_text": "xnoise()", "fullpath": "/vex/functions/xnoise.html"}], "extent": [8817, 8837]}], "container": true}], "container": true, "attrs": {"id": "noiselinks"}}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["clipindex"]}, "role": "item", "extent": [8837, 8853], "body": [{"type": "para", "indent": 4, "text": ["Index of a clip in the agent\u2019s definition.\n    A clip\u2019s index can be obtained via ", {"scheme": "Vex", "value": "/vex/functions/agentfindclip", "type": "link", "text": "", "fallback_text": "agentfindclip()", "fullpath": "/vex/functions/agentfindclip.html"}, "."], "extent": [8879, 8987]}], "container": true, "attrs": {"id": "agent_clipindex"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["trs"]}, "role": "item", "extent": [8987, 8997], "body": [{"type": "para", "indent": 4, "text": ["One of the transform order constants listed below, which can be imported from ", {"type": "code", "text": ["$HFS/houdini/vex/include/math.h"]}, "."], "extent": [9010, 9128]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Constant name "], "role": "th", "extent": [9128, 9149], "container": true}, {"type": "cell", "indent": 8, "text": ["Transform Order "], "role": "th", "extent": [9149, 9176]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_SRT "], "role": "td", "extent": [9176, 9192], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Scale, Rotate, Translate"], "extent": [9192, 9225]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_STR "], "role": "td", "extent": [9225, 9241], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Scale, Translate, Rotate"], "extent": [9241, 9274]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_RST "], "role": "td", "extent": [9274, 9290], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rotate, Scale, Translate"], "extent": [9290, 9323]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_RTS "], "role": "td", "extent": [9323, 9339], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rotate, Translate, Scale"], "extent": [9339, 9372]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_TSR "], "role": "td", "extent": [9372, 9388], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Translate, Scale, Rotate"], "extent": [9388, 9421]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_TRS "], "role": "td", "extent": [9421, 9437], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Translate, Rotate, Scale"], "extent": [9437, 9471]}]}], "divider": false}]}], "container": true, "attrs": {"id": "trs"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["xyz"]}, "role": "item", "extent": [9471, 9481], "body": [{"type": "para", "indent": 4, "text": ["One of the rotation order constants listed below, which can be imported from ", {"type": "code", "text": ["$HFS/houdini/vex/include/math.h"]}, "."], "extent": [9494, 9611]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Constant name "], "role": "th", "extent": [9611, 9632], "container": true}, {"type": "cell", "indent": 8, "text": ["Rotation Order "], "role": "th", "extent": [9632, 9658]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_XYZ "], "role": "td", "extent": [9658, 9674], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rotate order X, Y, Z"], "extent": [9674, 9703]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_XZY "], "role": "td", "extent": [9703, 9719], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rotate order X, Z, Y"], "extent": [9719, 9748]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_YXZ "], "role": "td", "extent": [9748, 9764], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rotate order Y, X, Z"], "extent": [9764, 9793]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_YZX "], "role": "td", "extent": [9793, 9809], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rotate order Y, Z, X"], "extent": [9809, 9838]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_ZXY "], "role": "td", "extent": [9838, 9854], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rotate order Z, X, Y"], "extent": [9854, 9883]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["XFORM_ZYX "], "role": "td", "extent": [9883, 9899], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Rotate order Z, Y, X"], "extent": [9899, 9928]}]}], "divider": false}]}], "container": true, "attrs": {"id": "xyz"}}], "container": true, "role": "item_group"}]}