{"type": "root", "attrs": {"type": "include"}, "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Image filtering options"], "extent": [16, 46], "body": [{"type": "para", "indent": 0, "text": ["Examples of specifying filter parameters:"], "extent": [46, 90]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\ncolormap(map, u, v, \"smode\", \"decal\", \"tmode\", \"repeat\", \"border\", {.1,1,1});\ncolormap(map, u, v, \"mode\", \"clamp\", \"width\", 1.3);\ncolormap(map, u, v, \"filter\", \"gauss\", \"width\", 1.3, \"mode\", \"repeat\");\n"], "extent": [90, 306]}, {"type": "para", "indent": 0, "text": ["If the texture is a deep ", {"type": "code", "text": [".rat"]}, " file, you can use the ", {"type": "code", "text": ["\"channel\""]}, " keyword argument\nto specify a channel in the file:"], "extent": [306, 425]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\nstring channelname = \"N\";\ncf = colormap(map, u, v, \"channel\", channelname);\n"], "extent": [425, 509]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["When you read a texture in a format other than Houdini\u2019s native ", {"type": "code", "text": [".pic"]}, " or ", {"type": "code", "text": [".rat"]}, ", Houdini uses ", {"scheme": "Wp", "value": "http://en.wikipedia.org/wiki/OpenImageIO", "type": "link", "text": ["OpenImageIO"], "exists": true}, " to read the image data from the file. In that case, some of the variadic arguments below may not have any effect."], "extent": [509, 751]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["When the texture function evaluates non-houdini format textures, Houdini switches to use OpenImageIO for texture evaluation.  While there are corresponding values to many of the variadic keywords, some keywords don\u2019t have an equivalent function in OpenImageIO."], "extent": [751, 1015], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["OIIO will ", {"type": "em", "text": ["not"]}, " create MIP maps for images that don\u2019t have multi-resolution images by default. You can turn this on by adding ", {"type": "code", "text": ["automip=1"]}, " to the content of the the ", {"type": "code", "text": ["OPENIMAGEIO_IMAGECACHE_OPTIONS"]}, " environment variable."], "extent": [1015, 1241], "body": [{"type": "para", "indent": 8, "text": ["Without MIP maps, blurring and filtering may not work as expected."], "extent": [1241, 1317]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["You can also use ", {"type": "code", "text": ["OPENIMAGEIO_IMAGECACHE_OPTIONS"]}, " to override the amount of memory OIIO uses for caching."], "extent": [1317, 1430], "body": [{"type": "para", "indent": 8, "text": ["By default, Houdini will set the cache memory to 1/8th of the physical computer memory.  If you set the ", {"type": "code", "text": ["OPENIMAGEIO_IMAGECACHE_OPTIONS"]}, " variable it overrides that computed cache size."], "extent": [1430, 1624]}], "container": true}], "container": true}], "container": true}], "container": true}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": ["wrap"], "role": "item", "extent": [1624, 1636], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["repeat"]}, " or ", {"type": "code", "text": ["periodic"]}, " "], "extent": [1682, 1711], "body": [{"type": "para", "indent": 8, "text": ["The image map will repeat outside the range 0 to 1.\n        Basically, the integer component of the texture\n        coordinate is ignored. This is the default."], "extent": [1711, 1879]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["clamp"]}, " or ", {"type": "code", "text": ["edge"]}, " or ", {"type": "code", "text": ["streak"]}, " "], "extent": [1879, 1915], "body": [{"type": "para", "indent": 8, "text": ["The texture coordinates will be clamped to the range 0\n        to 1. This causes evaluations outside the range to\n        evaluate to the color at the closest edge of the image\n        (the border pixels are streaked outside the range)."], "extent": [1915, 2160]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["black"]}, " or ", {"type": "code", "text": ["decal"]}, " or ", {"type": "code", "text": ["color"]}, " "], "extent": [2160, 2196], "body": [{"type": "para", "indent": 8, "text": ["Coordinates outside the range 0 to 1 will evaluate to\n        the border color (rather than a color in the image). The\n        border color is black (i.e. 0) by default."], "extent": [2196, 2375]}], "container": true}], "container": true}], "container": true, "attrs": {"type": "string", "default": "\"repeat\""}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["uwrap"], "role": "item", "extent": [2375, 2388], "body": [{"type": "para", "indent": 4, "text": ["(AKA ", {"type": "code", "text": ["swrap"]}, ")\n    Specifies the behavior when the u coordinate is outside\n    the range 0 to 1. The values are the same as with ", {"type": "code", "text": ["wrap"]}, "."], "extent": [2411, 2552]}], "container": true, "attrs": {"type": "string"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["vwrap"], "role": "item", "extent": [2552, 2565], "body": [{"type": "para", "indent": 4, "text": ["(AKA ", {"type": "code", "text": ["twrap"]}, ")\n    Specifies the behavior when the v coordinate is outside\n    the range 0 to 1. The values are the same as with ", {"type": "code", "text": ["wrap"]}, "."], "extent": [2588, 2729]}], "container": true, "attrs": {"type": "string"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["border"], "role": "item", "extent": [2729, 2743], "body": [{"type": "para", "indent": 4, "text": ["Specifies the border color when Black/Decal/Color wrapping is used.\n    ", {"type": "strong", "text": ["Has no effect for OpenImageIO formats"]}, "."], "extent": [2796, 2914]}], "container": true, "attrs": {"type": "float|vector|vector4", "default": "0"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["default_color"], "role": "item", "extent": [2914, 2935], "body": [{"type": "para", "indent": 4, "text": ["Specifies the color to use when the texture map cannot be found.  If this\n    argument is not given, the color is set by the\n    HOUDINI_DEFAULT_TEXTURE_COLOR variable."], "extent": [2968, 3142]}], "container": true, "attrs": {"type": "float|vector|vector4"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["channel"], "role": "item", "extent": [3142, 3157], "body": [{"type": "para", "indent": 4, "text": ["Specifies the color channel for textures that have multiple color\n    planes (for example, ", {"type": "code", "text": ["diffuse_indirect"]}, " or ", {"type": "code", "text": ["N"]}, ").\n    For ptex images, this specifies the index of the first channel\n    (for example, ", {"type": "code", "text": ["0"]}, " or ", {"type": "code", "text": ["4"]}, ")."], "extent": [3157, 3383]}], "container": true, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["blur"], "role": "item", "extent": [3383, 3395], "body": [{"type": "para", "indent": 4, "text": ["Blurs in x and y directions. Blur is measured as a percentage\n    of the image size - so a blur of 0.1 will blur 10% of the image\n    width.  Use ", {"type": "code", "text": ["xblur"]}, " and ", {"type": "code", "text": ["yblur"]}, " if you need different blur\n    amounts in either dimension."], "extent": [3435, 3666]}], "container": true, "attrs": {"type": "float", "id": "vargblur"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["xblur"], "role": "item", "extent": [3666, 3679], "body": [{"type": "para", "indent": 4, "text": ["(AKA ", {"type": "code", "text": ["ublur"]}, ", ", {"type": "code", "text": ["sblur"]}, ")\n    Blur amount in the x image direction."], "extent": [3679, 3753]}], "container": true, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["yblur"], "role": "item", "extent": [3753, 3766], "body": [{"type": "para", "indent": 4, "text": ["(AKA ", {"type": "code", "text": ["vblur"]}, ", ", {"type": "code", "text": ["tblur"]}, ")\n    Blur amount in the y image direction."], "extent": [3766, 3840]}], "container": true, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["pixelblur"], "role": "item", "extent": [3840, 3857], "body": [{"type": "para", "indent": 4, "text": ["Blurs the texture by a floating point number of pixels.\n    ", {"type": "strong", "text": ["Has no effect for OpenImageIO formats"]}, "."], "extent": [3879, 3989]}, {"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    Cf = texture(\"map.rat\", ss, tt, \"pixelblur\", 2.0);\n    "], "extent": [3989, 4070]}], "container": true, "attrs": {"type": "float"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["xpixelblur"], "role": "item", "extent": [4070, 4089], "body": [{"type": "para", "indent": 4, "text": ["Blurs the texture by a floating point number of pixels in the X direction."], "extent": [4111, 4191]}], "container": true, "attrs": {"type": "float"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["ypixelblur"], "role": "item", "extent": [4191, 4209], "body": [{"type": "para", "indent": 4, "text": ["Blurs the texture by a floating point number of pixels in the Y direction."], "extent": [4231, 4315]}], "container": true, "attrs": {"type": "float"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["filter"], "role": "item", "extent": [4315, 4329], "body": [{"type": "para", "indent": 4, "text": ["Specifies the type of anti-aliasing filter to be used for\n    evaluation."], "extent": [4392, 4471]}, {"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["For Houdini native formats"]}, ", the following value should be a string specifying one of:"], "extent": [4471, 4564]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["\"point\""]}], "extent": [4564, 4579], "body": [{"type": "para", "indent": 8, "text": ["Point sampling (i.e. no filtering)"], "extent": [4579, 4622]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["\"box\""]}], "extent": [4622, 4635], "body": [{"type": "para", "indent": 8, "text": ["Box filter (default)"], "extent": [4635, 4664]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["\"gauss\""]}], "extent": [4664, 4679], "body": [{"type": "para", "indent": 8, "text": ["Gaussian filter"], "extent": [4679, 4703]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["\"bartlett\""]}], "extent": [4703, 4721], "body": [{"type": "para", "indent": 8, "text": ["Bartlett/Triangular filter"], "extent": [4721, 4756]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["\"sinc\""]}], "extent": [4756, 4770], "body": [{"type": "para", "indent": 8, "text": ["Sinc sharpening filter"], "extent": [4770, 4801]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["\"hanning\""]}], "extent": [4801, 4818], "body": [{"type": "para", "indent": 8, "text": ["Hanning filter"], "extent": [4818, 4841]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["\"blackman\""]}], "extent": [4841, 4859], "body": [{"type": "para", "indent": 8, "text": ["Blackman filter"], "extent": [4859, 4883]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["\"catrom\""]}], "extent": [4883, 4899], "body": [{"type": "para", "indent": 8, "text": ["Catmull-Rom filter"], "extent": [4899, 4927]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["For all other formats (loaded by OpenImageIO)"]}, ", specifying the ", {"type": "code", "text": ["\"point\""]}, " filter sets the OIIO interpolation mode to ", {"type": "code", "text": ["\"closest\""]}, " and disables MIP mapping. Any other value uses OIIO smart-bicubic interpolation. You can get finer control using the ", {"type": "code", "text": ["\"filtermode\""]}, " variadic argument (see below)."], "extent": [4927, 5224]}], "container": true, "attrs": {"type": "string", "default": "\"box\"", "id": "vargfilter"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["xfilter"], "role": "item", "extent": [5224, 5239], "body": [{"type": "para", "indent": 4, "text": ["(AKA ", {"type": "code", "text": ["ufilter"]}, ", ", {"type": "code", "text": ["sfilter"]}, ")\n    Specifies the filter for the X direction. The filters are\n    the same as with ", {"type": "code", "text": ["filter"]}, "."], "extent": [5262, 5387]}], "container": true, "attrs": {"type": "string"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["yfilter"], "role": "item", "extent": [5387, 5402], "body": [{"type": "para", "indent": 4, "text": ["(AKA ", {"type": "code", "text": ["vfilter"]}, ", ", {"type": "code", "text": ["tfilter"]}, ")\n    Specifies the filter for the Y direction. The filters are\n    the same as with ", {"type": "code", "text": ["filter"]}, "."], "extent": [5425, 5550]}], "container": true, "attrs": {"type": "string"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["filtermode"], "role": "item", "extent": [5550, 5568], "body": [{"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["For Houdini native formats"]}, ", VEX also supports simpler filtering.  The\n    ", {"type": "code", "text": ["filtermode"]}, " can be set to one of:"], "extent": [5587, 5703]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["filter"]}], "extent": [5703, 5717], "body": [{"type": "para", "indent": 11, "text": ["Use the filter specified by the ", {"type": "code", "text": ["filter"]}, " keyword argument."], "extent": [5717, 5787]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bilinear"]}], "extent": [5787, 5803], "body": [{"type": "para", "indent": 11, "text": ["Use simple bilinear filtering.  This is the fastest specialized filtering mode, but provides the lowest quality filtering."], "extent": [5803, 5937]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["biquadratic"]}], "extent": [5937, 5956], "body": [{"type": "para", "indent": 11, "text": ["Use simple quadratic filtering (order 3 filtering)."], "extent": [5956, 6019]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bicubic"]}], "extent": [6019, 6034], "body": [{"type": "para", "indent": 11, "text": ["Use simple bicubic filtering."], "extent": [6034, 6076]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["When the ", {"type": "code", "text": ["filtermode"]}, " is set to ", {"type": "code", "text": ["bilinear"]}, ", ", {"type": "code", "text": ["biquadratic"]}, " or ", {"type": "code", "text": ["bicubic"]}, ",\n    several arguments (like ", {"type": "code", "text": ["filter"]}, " and ", {"type": "code", "text": ["width"]}, ") are ignored and a fixed\n    interpolation filter is used instead.  Other arguments (notably the ", {"type": "code", "text": ["lerp"]}, "\n    and ", {"type": "code", "text": ["blur"]}, " keywords) are still valid."], "extent": [6076, 6348]}, {"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["For all other formats (loaded by OpenImageIO)"]}, " you can set the ", {"type": "code", "text": ["filtermode"]}, " to ", {"type": "code", "text": ["\"filter\""]}, " (see ", {"type": "code", "text": ["\"filter\""]}, " above), ", {"type": "code", "text": ["\"bilinear\""]}, ", ", {"type": "code", "text": ["\"biquadratic\""]}, ", or ", {"type": "code", "text": ["\"bicubic\""]}, "."], "extent": [6348, 6515]}], "container": true, "attrs": {"type": "string"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["width"], "role": "item", "extent": [6515, 6528], "body": [{"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["For Houdini native formats"]}, ", this sets the filter width in both X and Y directions."], "extent": [6587, 6677]}, {"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["For all other formats (loaded by OpenImageIO)"]}, ", this sets the OIIO ", {"type": "code", "text": ["swidth"]}, " and ", {"type": "code", "text": ["twidth"]}, " options."], "extent": [6677, 6781]}], "container": true, "attrs": {"type": "float", "default": "1.0", "id": "vargwidth"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["xwidth"], "role": "item", "extent": [6781, 6795], "body": [{"type": "para", "indent": 4, "text": ["(AKA ", {"type": "code", "text": ["uwidth"]}, ", ", {"type": "code", "text": ["swidth"]}, ")\n    Filter width in the X direction."], "extent": [6817, 6884]}], "container": true, "attrs": {"type": "float"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["ywidth"], "role": "item", "extent": [6884, 6898], "body": [{"type": "para", "indent": 4, "text": ["(AKA ", {"type": "code", "text": ["vwidth"]}, ", ", {"type": "code", "text": ["twidth"]}, ")\n    Filter width in the Y direction."], "extent": [6920, 6987]}], "container": true, "attrs": {"type": "float"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["zwidth"], "role": "item", "extent": [6987, 7001], "body": [{"type": "para", "indent": 4, "text": ["Filter width in the Z direction (for shadow maps).\n    This is measured in world space units, unlike the other width arguments."], "extent": [7023, 7156]}], "container": true, "attrs": {"type": "float"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["extrapolate"], "role": "item", "extent": [7156, 7175], "body": [{"type": "para", "indent": 4, "text": ["whether to use derivative extrapolation\n    when computing anti-aliasing information. Extrapolation of\n    derivatives is on by default. The argument should be either 0 or\n    1."], "extent": [7195, 7379]}], "container": true, "attrs": {"type": "int"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["lerp"], "role": "item", "extent": [7379, 7391], "body": [{"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["For Houdini native formats"]}, ", this specifies whether RAT files should interpolate between different MIP levels. By default, this is turned off. Turning interpolation on will help remove discontinuities when different\n    MIP levels of a ", {"type": "code", "text": [".rat"]}, " file are accessed. However, the results of texture evaluation will be slightly softer (i.e. blurrier) and will take more time."], "extent": [7425, 7801]}, {"type": "para", "indent": 4, "text": ["There are three possible values for this argument."], "extent": [7801, 7861]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["0"]}], "extent": [7861, 7870], "body": [{"type": "para", "indent": 8, "text": ["Disable MIP map interpolation (fastest)."], "extent": [7870, 7919]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["1"]}], "extent": [7919, 7928], "body": [{"type": "para", "indent": 8, "text": ["Approximate MIP map interpolation (fast)."], "extent": [7928, 7978]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["2"]}], "extent": [7978, 7987], "body": [{"type": "para", "indent": 8, "text": ["High Quality MIP map interpolation (slower but highest quality)."], "extent": [7987, 8061]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["For all other formats (loaded by OpenImageIO)"]}, ", a value of 0 specifies a single MIP level, any other value specifies trilinear interpolation."], "extent": [8061, 8209]}], "container": true, "attrs": {"type": "int", "id": "varglerp"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["depthinterp"], "role": "item", "extent": [8209, 8228], "body": [{"type": "para", "indent": 4, "text": ["Specifies the depth interpolation mode for deep shadow maps,\n    to control the opacity value that will be returned when the\n    map is sampled between two z-records."], "extent": [8247, 8423]}, {"type": "para", "indent": 4, "text": ["The argument must be a string."], "extent": [8423, 8459]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["discrete"]}, " "], "extent": [8459, 8476], "body": [{"type": "para", "indent": 8, "text": ["(default) Return the first z-record before the sample\n        point."], "extent": [8476, 8553]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["linear"]}, " "], "extent": [8553, 8568], "body": [{"type": "para", "indent": 8, "text": ["Linearly interpolate the opacities of the z-records\n        before and after the sample point."], "extent": [8568, 8680]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/render/lights", "type": "link", "text": ["deep shadow maps"], "fullpath": "/render/lights.html"}, " for more on\n    the difference between the two modes."], "extent": [8680, 8777]}], "container": true, "attrs": {"type": "string"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["beerlambert"], "role": "item", "extent": [8777, 8796], "body": [{"type": "para", "indent": 4, "text": ["When evaluating volumetric deep shadow maps, this will enable Beer-Lambert\n    interpolation of opacity.  Beer-Lambert is more a accurate but more\n    expensive form of interpolation."], "extent": [8816, 9005]}, {"type": "para", "indent": 4, "text": ["The argument should be either 0 or 1."], "extent": [9005, 9048]}], "container": true, "attrs": {"type": "int"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["srccolorspace"], "role": "item", "extent": [9048, 9069], "body": [{"type": "para", "indent": 4, "text": ["Specifies the color space in which the texture is stored.\n    When texture values are accessed, they will be translated from\n    this space into linear space for rendering if needed."], "extent": [9092, 9280]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["auto"]}, " "], "extent": [9280, 9293], "body": [{"type": "para", "indent": 8, "text": ["(default) Determine the source color space based on the\n        file.  Currently, this will assume sRGB color space for\n        8-bit textures and linear for all other textures."], "extent": [9293, 9479]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["linear"]}, " "], "extent": [9479, 9494], "body": [{"type": "para", "indent": 8, "text": ["Transform to linear space.  This currently only affects\n        8-bit textures, since all others are assumed to be already\n        in linear space.  Use this option to force linear\n        interpretation of textures used for bump or displacement\n        maps."], "extent": [9494, 9762]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["sRGB"]}, " "], "extent": [9762, 9775], "body": [{"type": "para", "indent": 8, "text": ["Forcibly translate from sRGB color space to linear space regardless of\n        the bit-depth or number of channels in the the texture."], "extent": [9775, 9918]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["rec709"]}], "extent": [9918, 9932], "body": [{"type": "para", "indent": 8, "text": ["Convert from Rec709 color space to linear space."], "extent": [9932, 9989]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["gamma22"]}], "extent": [9989, 10004], "body": [{"type": "para", "indent": 8, "text": ["Convert from Gamma 2.2 color space to linear space."], "extent": [10004, 10064]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["raw"]}], "extent": [10064, 10075], "body": [{"type": "para", "indent": 8, "text": ["Use map colors untransformed"], "extent": [10075, 10113]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["srccolorspace"]}, " argument can also be any color space known to OpenColorIO."], "extent": [10113, 10197]}], "container": true, "attrs": {"type": "string"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["face"], "role": "item", "extent": [10197, 10209], "body": [{"type": "para", "indent": 4, "text": ["When using a Ptex texture map, the ", {"type": "code", "text": ["face"]}, " argument is used to specify the face for ptexture lookup.\n    ", {"type": "strong", "text": ["Has no effect for OpenImageIO formats"]}, "."], "extent": [10209, 10359]}], "container": true, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["ptexorient"], "role": "item", "extent": [10359, 10377], "body": [{"type": "para", "indent": 4, "text": ["When using Ptex textures, the implicit texture coordinates on\n    polygons are used as the interpolants for texture lookup (combined\n    with the ", {"type": "code", "text": ["face"]}, ").  However, different software may have different\n    beliefs about winding and orientation.  This keyword argument\n    allows you to control the interpretation of orientation for Houdini\n    polygons.  The ", {"type": "code", "text": ["ptexorient"]}, " expects an integer argument which is\n    composed of a bit-field"], "extent": [10397, 10840]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["bit 0\u00d701: Complement the ", {"type": "code", "text": ["s"]}, " coordinate"], "extent": [10840, 10886]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["bit 0\u00d702: Complement the ", {"type": "code", "text": ["t"]}, " coordinate"], "extent": [10886, 10932]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["bit 0\u00d704: Swap the ", {"type": "code", "text": ["s"]}, " and ", {"type": "code", "text": ["t"]}, " coordinates"], "extent": [10932, 10982]}], "container": true}, {"type": "para", "indent": 4, "text": ["For example, a value of 6 (0\u00d74|0\u00d72) is equivalent to calling\n    ", {"type": "code", "text": ["texture(map, 1-t, s)"]}, " instead of ", {"type": "code", "text": ["texture(map, s, t)"]}, "."], "extent": [10982, 11108]}, {"type": "para", "indent": 4, "text": ["The default ", {"type": "code", "text": ["ptexorient"]}, " is 0, which works correctly with the\n    examples found at ", {"scheme": null, "value": "http://ptex.us", "type": "link", "text": "", "exists": true}, "."], "extent": [11108, 11215]}, {"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["Has no effect for OpenImageIO formats"]}, "."], "extent": [11215, 11261]}], "container": true, "attrs": {"type": "int"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": ["iesnormalization"], "role": "item", "extent": [11261, 11285], "body": [{"type": "para", "indent": 4, "text": ["Select different methods of normalizing IES map\u2019s output values when\n    querying via ", {"type": "code", "text": ["environment()"]}, " function."], "extent": [11329, 11446]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["none"]}, " "], "extent": [11446, 11459], "body": [{"type": "para", "indent": 8, "text": ["Use raw values scaled by the candela multiplier in the header."], "extent": [11459, 11530]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["maxvalue"]}, " "], "extent": [11530, 11547], "body": [{"type": "para", "indent": 8, "text": ["(default) Normalized by the maximum value. This is legacy behavior used\n        by mantra\u2019s default light shader."], "extent": [11547, 11669]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["preserveenergy"]}, " "], "extent": [11669, 11692], "body": [{"type": "para", "indent": 8, "text": ["Normalized by values integrated over coverage angles, so that IES\n        profile affects shaping of the light while preserving its overall\n        energy output."], "extent": [11692, 11863]}], "container": true}], "container": true}], "container": true, "attrs": {"type": "string", "default": "\"maxvalue\""}, "variadic": true}], "container": true, "role": "item_group"}]}]}