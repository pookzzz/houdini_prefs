{"type": "root", "attrs": {"type": "include"}, "body": [{"tag": "parameters", "attrs": {"id": "render_buttons"}, "type": "pxml", "indent": 0, "extent": [16, 49], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Save to Disk"], "extent": [49, 67], "body": [{"type": "para", "indent": 8, "text": ["Begins the render with the last render control settings."], "extent": [89, 155]}], "container": true, "attrs": {"id": "execute"}}, {"type": "dt", "indent": 4, "text": ["Controls"], "extent": [155, 169], "body": [{"type": "para", "indent": 8, "text": ["Opens the ", {"scheme": null, "value": "/ref/windows/rendercontrol", "type": "link", "text": ["Render Control window"], "fullpath": "/ref/windows/rendercontrol.html"}, ", which \n        allows you to adjust the render parameters before rendering."], "extent": [196, 343]}], "container": true, "attrs": {"id": "renderdialog"}}, {"type": "dt", "indent": 4, "text": ["Render with Take"], "extent": [343, 365], "body": [{"type": "para", "indent": 8, "text": ["Uses the settings in a particular take while rendering. Choose\n        ", {"type": "ui", "text": ["Current"]}, " to use the current take when rendering."], "extent": [384, 516]}], "container": true, "attrs": {"id": "take"}}], "container": true}], "container": true}, {"tag": "parameters", "attrs": {"id": "render_buttons_only"}, "type": "pxml", "indent": 0, "extent": [516, 554], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Render"], "extent": [554, 566], "body": [{"type": "para", "indent": 8, "text": ["Begins the render with the last render control settings."], "extent": [588, 654]}], "container": true, "attrs": {"id": "execute"}}, {"type": "dt", "indent": 4, "text": ["Controls"], "extent": [654, 668], "body": [{"type": "para", "indent": 8, "text": ["Opens the render control dialog to allow adjustments of the\n        render parameters before rendering."], "extent": [695, 808]}], "container": true, "attrs": {"id": "renderdialog"}}], "container": true}], "container": true}, {"level": 2, "id": "standard_tab", "container": true, "type": "h", "indent": 0, "text": ["Standard"], "extent": [808, 838], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Camera"], "extent": [838, 851], "body": [{"type": "para", "indent": 8, "text": ["The camera to render the scene from."], "extent": [851, 897]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Visible Objects"], "extent": [897, 918], "body": [{"type": "para", "indent": 8, "text": ["Space-separated list of objects which will be rendered. Use ", {"type": "code", "text": ["*"]}, "\n        to render all objects (the default). You can use wildcards (for\n        example ", {"type": "code", "text": ["prop_*"]}, ") and ", {"scheme": null, "value": "/ref/panes/bundles", "type": "link", "text": ["bundle references"], "fullpath": "/ref/panes/bundles.html"}, "\n        to specify objects."], "extent": [918, 1160]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Visible atmosphere"], "extent": [1160, 1184], "body": [{"type": "para", "indent": 8, "text": ["Space-separated list of atmosphere objects which will be\n        rendered. Use ", {"type": "code", "text": ["*"]}, " to render all atmosphere objects (the\n        default). You can use wildcards (for example ", {"type": "code", "text": ["fog_*"]}, ") and\n        ", {"scheme": null, "value": "/ref/panes/bundles", "type": "link", "text": ["bundle references"], "fullpath": "/ref/panes/bundles.html"}, "  to specify atmosphere\n        objects."], "extent": [1184, 1467]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Active Lights"], "extent": [1467, 1486], "body": [{"type": "para", "indent": 8, "text": ["Space-separated list of lights which will illuminate the scene.\n        Use ", {"type": "code", "text": ["*"]}, " to use all lights. You can use wildcards (for example\n        ", {"type": "code", "text": ["key_*"]}, ") and  ", {"scheme": null, "value": "/ref/panes/bundles", "type": "link", "text": ["bundle references"], "fullpath": "/ref/panes/bundles.html"}, "  to specify\n        lights."], "extent": [1486, 1718]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Unload SOPs"], "extent": [1718, 1735], "body": [{"type": "para", "indent": 8, "text": ["Unload SOP geometry after used by the render."], "extent": [1735, 1790]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Output Picture"], "extent": [1790, 1810], "body": [{"type": "para", "indent": 8, "text": ["The picture or device to be rendered."], "extent": [1810, 1857]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Image Format"], "extent": [1857, 1875], "body": [{"type": "para", "indent": 8, "text": ["The file format (for example, Houdini pic) of the rendered\n        image."], "extent": [1875, 1958]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Valid Frame Range"], "extent": [1958, 1981], "body": [{"type": "para", "indent": 8, "text": ["Controls whether this render node outputs the current frame or the image sequence specified in the ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameters."], "extent": [2013, 2151]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Render Current Frame"], "extent": [2151, 2181], "body": [{"type": "para", "indent": 12, "text": ["Export only the current frame."], "extent": [2181, 2225]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Render Frame Range"], "extent": [2225, 2253], "body": [{"type": "para", "indent": 12, "text": ["Export the frames in the ", {"type": "ui", "text": ["Start/End/Inc"]}, " frame range, \n            but also allow exporting of frames referenced by in-range frames."], "extent": [2253, 2401]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Render Frame Range Only (Strict)"], "extent": [2401, 2443], "body": [{"type": "para", "indent": 12, "text": ["Only export the frames in the ", {"type": "ui", "text": ["Start/End/Inc"]}, " frame range. \n            Do not allow exporting of other frames, including frames referenced by\n            in-range frames."], "extent": [2443, 2630]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "valid_frame_range"}}, {"type": "dt", "indent": 4, "text": ["Start/End/Inc"], "extent": [2630, 2649], "body": [{"type": "para", "indent": 8, "text": ["Specifies the range of frames to render (start frame, end frame, and\n        increment). All of the values can be floating point values. The range\n        is inclusive. "], "extent": [2665, 2844]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameters determine the values of the below \n        ", {"scheme": null, "value": "/network/expressions#render", "type": "link", "text": ["local variables"], "fullpath": "/network/expressions.html#render", "fragment": "#render"}, " for the output driver."], "extent": [2844, 2998]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": [{"type": "code", "text": ["$NRENDER"]}], "extent": [2998, 3018], "body": [{"type": "para", "indent": 12, "text": ["The number of frames to be rendered by the output driver."], "extent": [3018, 3089]}], "container": true}, {"type": "dt", "indent": 8, "text": [{"type": "code", "text": ["$N"]}], "extent": [3089, 3103], "body": [{"type": "para", "indent": 12, "text": ["The current frame being rendered (starting at 1 and going to\n            ", {"type": "code", "text": ["$NRENDER"]}, ")."], "extent": [3103, 3210]}], "container": true}], "container": true}, {"type": "para", "indent": 8, "text": ["For example, if the parameters are set to:"], "extent": [3210, 3270]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Start "], "role": "th", "extent": [3270, 3287], "container": true}, {"type": "cell", "indent": 12, "text": ["End "], "role": "th", "extent": [3287, 3306], "container": true}, {"type": "cell", "indent": 16, "text": ["Inc "], "role": "th", "extent": [3306, 3329]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["10.5 "], "role": "td", "extent": [3329, 3344], "container": true}, {"type": "cell", "indent": 12, "text": ["12 "], "role": "td", "extent": [3344, 3361], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 16, "text": ["0.5 "], "extent": [3361, 3383]}]}], "divider": false}]}, {"type": "para", "indent": 8, "text": ["\u2026 there will be 4 frames rendered (10.5, 11, 11.5, and 12), so ", {"type": "code", "text": ["$NRENDER"]}, " will have a value of 4. "], "extent": [3383, 3493]}, {"type": "para", "indent": 8, "text": [{"type": "code", "text": ["$N"]}, " will have the following values at each frame:"], "extent": [3493, 3561]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Frame "], "role": "th", "extent": [3561, 3578], "container": true}, {"type": "cell", "indent": 12, "text": [{"type": "code", "text": ["$N"]}, " "], "role": "th", "extent": [3578, 3598]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["10.5 "], "role": "td", "extent": [3598, 3613], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["1"], "extent": [3613, 3627]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["11 "], "role": "td", "extent": [3627, 3640], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["2"], "extent": [3640, 3654]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["11.5 "], "role": "td", "extent": [3654, 3669], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["3"], "extent": [3669, 3683]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["12 "], "role": "td", "extent": [3683, 3696], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["4"], "extent": [3696, 3711]}]}], "divider": false}]}], "container": true, "attrs": {"id": "f"}}, {"type": "dt", "indent": 4, "text": ["Axis System"], "extent": [3711, 3728], "body": [{"type": "para", "indent": 8, "text": ["Determines the axis system convention."], "extent": [3753, 3801]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Y Up (Right-handed)"], "extent": [3801, 3830], "body": [{"type": "para", "indent": 12, "text": ["Right-handed Y Up convention (default): Up = +Y, Front = +Z, Cross = +X. Use this for Houdini, Maya Y-Up, MotionBuilder, and OpenGL."], "extent": [3830, 3976]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Y Up (Left-handed)"], "extent": [3976, 4004], "body": [{"type": "para", "indent": 12, "text": ["Left-handed Y Up convention: Up = +Y, Front = +Z, Cross = -X. Use this for LightWave and DirectX."], "extent": [4004, 4115]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Z Up (Right-handed)"], "extent": [4115, 4144], "body": [{"type": "para", "indent": 12, "text": ["Right-handed Z Up convention: Up = +Z, Front = -Y, Cross = +X. Use this for Maya Z-Up and 3ds Max."], "extent": [4144, 4256]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Current (Y Up or Z Up Right-handed)"], "extent": [4256, 4301], "body": [{"type": "para", "indent": 12, "text": ["Export using the current scene orientation preference."], "extent": [4301, 4369]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "axissystem"}}, {"type": "dt", "indent": 4, "text": ["Convert to Specified Axis System"], "extent": [4369, 4407], "body": [{"type": "para", "indent": 8, "text": ["When turned on, the FBX scene will be converted from the current Houdini\n        scene orientation to the one specified in ", {"type": "ui", "text": ["Axis System"]}, "."], "extent": [4433, 4582]}], "container": true, "attrs": {"id": "convertaxis"}}, {"type": "dt", "indent": 4, "text": ["Compute Smoothing Groups"], "extent": [4582, 4612], "body": [{"type": "para", "indent": 8, "text": ["When turned on, computes smoothing group information from a mesh\u2019s vertex-mapped normals, and saves to FBX on export."], "extent": [4649, 4776]}, {"type": "para", "indent": 8, "text": ["These normals can be configured on your geometry using the ", {"scheme": "Node", "value": "/nodes/sop/normal", "type": "link", "text": ["Normal SOP"], "fullpath": "/nodes/sop/normal.html"}, ". By setting the Normal SOP\u2019s ", {"type": "ui", "text": ["Add Normals to"]}, " parameter to ", {"type": "ui", "text": ["Vertices"]}, ", weighted/split normals can be applied to different polygon groups to specify the soft/hard edge data used to compute smoothing group information. Applying the vertex normals to primitives or edges (set ", {"type": "ui", "text": ["Group Type"]}, " to ", {"type": "ui", "text": ["Primitives"]}, " or ", {"type": "ui", "text": ["Edges"]}, ") and configuring the ", {"type": "ui", "text": ["Cusp Angle"]}, " results in the expected smoothing data in your output FBX."], "extent": [4776, 5291]}], "container": true, "attrs": {"id": "computesmoothinggroups"}}, {"type": "dt", "indent": 4, "text": ["Initialize Sim. SOPs"], "extent": [5291, 5317], "body": [{"type": "para", "indent": 8, "text": ["Force all simulation SOPs to be reset."], "extent": [5317, 5365]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Generate Script File"], "extent": [5365, 5391], "body": [{"type": "para", "indent": 8, "text": ["Outputs an .ifd file instead of piping the script to mantra."], "extent": [5391, 5461]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Binary Script File"], "extent": [5461, 5485], "body": [{"type": "para", "indent": 8, "text": ["Toggles between ascii and binary file formats."], "extent": [5485, 5541]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Script File"], "extent": [5541, 5558], "body": [{"type": "para", "indent": 8, "text": ["Filename of the .ifd file."], "extent": [5558, 5594]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render Command"], "extent": [5594, 5614], "body": [{"type": "para", "indent": 8, "text": ["The command used to invoke the renderer. Can be modified with\n        the popup window."], "extent": [5614, 5711]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render in Background"], "extent": [5711, 5737], "body": [{"type": "para", "indent": 8, "text": ["Continue to use Houdini while rendering."], "extent": [5737, 5787]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Super Sample"], "extent": [5787, 5805], "body": [{"type": "para", "indent": 8, "text": ["Controls quality of anti-aliasing."], "extent": [5805, 5849]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Decouple Ray Sample"], "extent": [5849, 5874], "body": [{"type": "para", "indent": 8, "text": ["Specify an alternate sampling rate for ray tracing. Ray sampling\n        will use this value as a maximum sampling rate, and will take\n        fewer samples if there is low variance."], "extent": [5874, 6066]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "role": "item", "extent": [6066, 6080], "body": [{"type": "para", "indent": 12, "text": ["Decoupled ray sampling is only meaningful for micropolygon\n            rendering. It will be ignored when mantra is run in ray\n            tracing mode."], "extent": [6080, 6246]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 4, "text": ["Resolution"], "extent": [6246, 6262], "body": [{"type": "para", "indent": 8, "text": ["Override camera resolution with values specified."], "extent": [6262, 6321]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Pixel Aspect"], "extent": [6321, 6339], "body": [{"type": "para", "indent": 8, "text": ["Override camera pixel aspect ratio."], "extent": [6339, 6384]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Fields"], "extent": [6384, 6396], "body": [{"type": "para", "indent": 8, "text": ["Control for rendering video fields."], "extent": [6396, 6441]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Motion Blur"], "extent": [6441, 6458], "body": [{"type": "para", "indent": 8, "text": ["Specifies whether motion blur is allowed. If set to set to\n        disallow, motion blur is globally turned off regardless of\n        individual object settings."], "extent": [6458, 6629]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Motion Blur Type"], "extent": [6629, 6651], "body": [{"type": "para", "indent": 8, "text": ["The default motion blur type for rendering. This can be\n        overridden by an individual object."], "extent": [6651, 6760]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Depth of Field"], "extent": [6760, 6780], "body": [{"type": "para", "indent": 8, "text": ["Turn on rendering of depth of field effects."], "extent": [6780, 6834]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Jitter"], "extent": [6834, 6846], "body": [{"type": "para", "indent": 8, "text": ["Limits the amount of jitter. A value of 0 will result in no jitter."], "extent": [6846, 6923]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Dither"], "extent": [6923, 6935], "body": [{"type": "para", "indent": 8, "text": ["Controls the amount of dithering performed."], "extent": [6935, 6988]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Gamma"], "extent": [6988, 6999], "body": [{"type": "para", "indent": 8, "text": ["Gamma correction factor used."], "extent": [6999, 7038]}], "container": true}], "container": true}]}, {"level": 2, "id": "scripts_tab", "container": true, "type": "h", "indent": 0, "text": ["Scripts"], "extent": [7038, 7066], "body": [{"type": "para", "indent": 4, "text": ["A script command can be specified for execution at various execution\n    points. The expression language selected for the script parameter determines\n    whether the command is in hscript or python."], "extent": [7066, 7271]}, {"type": "para", "indent": 4, "text": ["Prior to execution, this node is automatically set as the global current\n    node."], "extent": [7271, 7359]}, {"type": "para", "indent": 4, "text": ["To run statements from a file, specify the path to the file with\n    either a ", {"type": "code", "text": [".cmd"]}, " extension (when the language is set to ", {"type": "ui", "text": ["Hscript"]}, ") or a ", {"type": "code", "text": [".py"]}, "\n    extension (when the language is set to ", {"type": "ui", "text": ["Python"]}, "). Additional arguments to the\n    script can also be supplied. They will be parsed in a shell-like manner."], "extent": [7359, 7673]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Pre-Render Script"], "extent": [7673, 7696], "body": [{"type": "para", "indent": 8, "text": ["Run this script before any rendering."], "extent": [7696, 7743]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Pre-Frame Script"], "extent": [7743, 7765], "body": [{"type": "para", "indent": 8, "text": ["Run this script before each frame."], "extent": [7765, 7809]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Post-Frame Script"], "extent": [7809, 7832], "body": [{"type": "para", "indent": 8, "text": ["Run this script after each frame."], "extent": [7832, 7875]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Post-Render Script"], "extent": [7875, 7899], "body": [{"type": "para", "indent": 8, "text": ["Run this script after all rendering."], "extent": [7899, 7945]}], "container": true}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Extra parameters"], "extent": [7945, 7968], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Create Intermediate Directories"], "extent": [7968, 8002], "body": [{"type": "para", "indent": 4, "text": ["When turned on, creates intermediate parent directories for output files as needed. Currently only applies to generated scripts, images, and shadow maps."], "extent": [8023, 8182]}], "container": true, "attrs": {"id": "mkpath"}}, {"type": "dt", "indent": 0, "text": ["Skip Existing Frames"], "extent": [8182, 8204], "body": [{"type": "para", "indent": 4, "text": ["Skip rendering of existing frames.  There are three values for this\n    parameter."], "extent": [8233, 8321]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Overwrite existing frames"], "extent": [8321, 8352], "body": [{"type": "para", "indent": 8, "text": ["This option will render every frame, regardless whether there\u2019s a\n        file on disk or not."], "extent": [8352, 8464]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Skip frames that exist"], "extent": [8464, 8492], "body": [{"type": "para", "indent": 8, "text": ["If there\u2019s a disk file that matches the ", {"type": "code", "text": ["vm_picture"]}, " parameter, no\n        render will be performed."], "extent": [8492, 8602]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Skip frames that are valid images"], "extent": [8602, 8641], "body": [{"type": "para", "indent": 8, "text": ["If a disk file exists, the integrity of the image is checked before\n        rendering is performed.  This option incurs the cost of reading the\n        image, but will re-render images that weren\u2019t fully rendered."], "extent": [8641, 8863]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "soho_skip_path"}}], "container": true}]}]}