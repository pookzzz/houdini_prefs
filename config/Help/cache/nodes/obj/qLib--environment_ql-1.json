{"type": "root", "attrs": {"icon": "NETWORKS/root", "context": "obj", "type": "node", "internal": "environment_ql", "version": "1", "namespace": "qLib"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Environment qL"], "extent": [48, 67]}, {"type": "para", "indent": 0, "text": [{"type": "strong", "text": ["interface version 1"]}], "extent": [67, 91]}, {"type": "summary", "indent": 0, "text": ["Sets environment variables defined in environment scripts and loads OTLs accordingly."], "extent": [91, 185]}, {"level": 1, "id": "Introduction", "container": true, "type": "Introduction_section", "indent": 0, "role": "section", "extent": [185, 199], "body": [{"type": "para", "indent": 0, "text": ["The ", {"type": "strong", "text": ["Environment qL"]}, " operator provides a simple but powerful method to set up\nenvironment variables for your scenes. It also provides a flexible way to load\nthe assets needed by your scene."], "extent": [199, 391]}, {"type": "para", "indent": 0, "text": ["The operator runs python scripts (called ", {"type": "em", "text": ["env scripts"]}, "). It looks for such scripts\nby starting at current hip file directory, then traveling upwards in the\nfolder hierarchy."], "extent": [391, 566]}, {"type": "para", "indent": 0, "text": ["The whole point of the ", {"type": "strong", "text": ["Environment qL"]}, " operator is to provide an easy way to define\nyour environment in a hierarchical and/or programmatic way. For example you can\ndefine site defaults in a ", {"type": "em", "text": ["site envrionment"]}, " script, which can be overridden at\nthe job level, which can be overriden again at the scene and/or at the shot level."], "extent": [566, 895]}, {"type": "para", "indent": 0, "text": ["The operator even provides you the opportunity to override parameters on the asset\ninterface (temporarily or permanently)."], "extent": [895, 1019]}, {"type": "para", "indent": 0, "text": ["Moreover, since the env scripts are actually written in python, you can do\nwhatever you can do with python: process file paths, run other scripts, create files\nor directories, or even connect to a database, etc."], "extent": [1019, 1234]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Building the Environment"], "extent": [1234, 1265], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["1."], "extent": [1265, 1270], "body": [{"type": "para", "indent": 4, "text": ["First the operator builds a list of environment scripts by looking for files\n    matching the pattern specified in the ", {"type": "em", "text": ["Env File Pattern"]}, " parameter. It starts\n    in your ", {"type": "code", "text": ["$HIP"]}, " directory and then it travels up to its parent directories up to the\n    root of the filesystem."], "extent": [1270, 1550]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [1550, 1559], "body": [{"type": "para", "indent": 8, "text": ["You can have directory names in the ", {"type": "em", "text": ["Env File Pattern"]}, " parameter like\n        '.env/*.py' if you prefer to put the environment scripts in a subdirectory."], "extent": [1559, 1722]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 0, "text": ["2."], "extent": [1722, 1726], "body": [{"type": "para", "indent": 4, "text": ["Next, the scripts are run in a top-down order (script(s) closest to the file system\n    hierarchy root are run first \u2013 script(s) in the ", {"type": "code", "text": ["$HIP"]}, " folder are run last.)"], "extent": [1726, 1897]}, {"type": "para", "indent": 4, "text": ["If a ", {"type": "em", "text": ["site environment script"]}, " is specified in the ", {"type": "em", "text": ["Site Env File"]}, " parameter,\n    it will always be the first to be run."], "extent": [1897, 2023]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [2023, 2032], "body": [{"type": "para", "indent": 8, "text": ["All the scripts are executed in the same local namespace, so variables and\n        other objects (i.e. functions and classes) defined at 'higher' level scripts can\n        be referenced and reassigned in 'lower' level ones.\n        (Almost like if it was one single script.)"], "extent": [2032, 2316]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 0, "text": ["3."], "extent": [2316, 2320], "body": [{"type": "para", "indent": 4, "text": ["Finally, script-defined variables with ", {"type": "strong", "text": ["ALL UPPERCASE"]}, " names get exported\n    to the Houdini environment and also listed in the ", {"type": "em", "text": ["Variables"]}, " tab in the parameter\n    interface."], "extent": [2320, 2501]}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["(The env building method is designed to be application-independent,\nso the same env scripts could be used from other apps with a Pyton API.)"], "extent": [2501, 2645]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Env Script Variables"], "extent": [2645, 2672], "body": [{"type": "para", "indent": 0, "text": ["The following variables are available in all environment scripts:"], "extent": [2672, 2740]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["HIP"], "extent": [2740, 2745], "body": [{"type": "para", "indent": 4, "text": ["Path of the current scene file.\n    (Usually the same as the ", {"type": "code", "text": ["$HIP"]}, " environment variable.)"], "extent": [2745, 2841]}], "container": true}, {"type": "dt", "indent": 0, "text": ["HIPNAME"], "extent": [2841, 2850], "body": [{"type": "para", "indent": 4, "text": ["The name of the Houdini scene."], "extent": [2850, 2886]}], "container": true}, {"type": "dt", "indent": 0, "text": ["JOB"], "extent": [2886, 2891], "body": [{"type": "para", "indent": 4, "text": ["Value of the ", {"type": "code", "text": ["$JOB"]}, " environment variable."], "extent": [2891, 2938]}], "container": true}, {"type": "dt", "indent": 0, "text": ["ENV_SCRIPT_PATH"], "extent": [2938, 2955], "body": [{"type": "para", "indent": 4, "text": ["Path of the current env script."], "extent": [2955, 2992]}], "container": true}, {"type": "dt", "indent": 0, "text": ["ENV_SCRIPT_NAME"], "extent": [2992, 3009], "body": [{"type": "para", "indent": 4, "text": ["Name of the current env script."], "extent": [3009, 3046]}], "container": true}, {"type": "dt", "indent": 0, "text": ["ENV_SCRIPTS"], "extent": [3046, 3059], "body": [{"type": "para", "indent": 4, "text": ["A dictionary of the scanned environment scripts in which the ", {"type": "em", "text": ["key"]}, " is the name of\n    the script while the ", {"type": "em", "text": ["value"]}, " is the path to that script. While ", {"type": "strong", "text": ["ENV_SCRIPT_PATH"]}, " and\n    ", {"type": "strong", "text": ["ENV_SCRIPT_NAME"]}, " is only available at the moment when the given script is running,\n    this dictionary is available in the first env script that gets executed. So for\n    example you can put the line"], "extent": [3059, 3444]}, {"lang": null, "type": "pre", "indent": 4, "text": ["JOB=ENV_SCRIPTS[\"job_env.py\"]"], "extent": [3444, 3484]}, {"type": "para", "indent": 4, "text": ["into your site environment script to indicate the you want the ", {"type": "code", "text": ["$JOB"]}, "\n    environment variable point to the directory where the 'job_env.py' file have been\n    found."], "extent": [3484, 3657]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 4, "role": "item", "extent": [3657, 3670], "body": [{"type": "para", "indent": 8, "text": ["Since ", {"type": "em", "text": ["keys"]}, " are unique in a dictionary, and we didn\u2019t want to overcomplicate\n        things, there could be only one instance of a given filename in ", {"type": "code", "text": ["ENV_SCRIPTS"]}, ".\n        The rule is that the file higher in the filesystem hierarchy is the one that\n        can be found in the dictionary."], "extent": [3670, 3969]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["The operator exports the global variables of the asset\u2019s python module so it\nprovides access to the ", {"type": "code", "text": ["hou"]}, " module and the scene itself."], "extent": [3969, 4105]}, {"type": "para", "indent": 0, "text": ["(Although this might be convenient, calling Houdini functions from env scripts\nbreak their application-independence.)"], "extent": [4105, 4226]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Special (Output) Variables"], "extent": [4226, 4259], "body": [{"type": "para", "indent": 0, "text": ["There are several special variables available that provide additional functionality."], "extent": [4259, 4346]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["MAPPINGS"], "extent": [4346, 4356], "body": [{"type": "para", "indent": 4, "text": ["You can define a dictionary called ", {"type": "code", "text": ["MAPPINGS"]}, " that let the operator translate\n    drive letters to UNC paths. For example"], "extent": [4356, 4483]}, {"lang": null, "type": "pre", "indent": 4, "text": ["\nMAPPINGS = {\n        \"x:\": \"//server/x\",\n        \"l:\": \"//library/l\",\n        } "], "extent": [4483, 4575]}, {"type": "para", "indent": 4, "text": ["will translate ", {"type": "code", "text": ["x:"]}, " to ", {"type": "code", "text": ["//server/x"]}, " and ", {"type": "code", "text": ["l:"]}, " to ", {"type": "code", "text": ["//library/l"]}, "."], "extent": [4575, 4644]}], "container": true}, {"type": "dt", "indent": 0, "text": ["ENV_VAR_ORDER"], "extent": [4644, 4659], "body": [{"type": "para", "indent": 4, "text": ["With this variable you can determine the display order of the variables coming\n    from the scripts. For example"], "extent": [4659, 4777]}, {"lang": null, "type": "pre", "indent": 4, "text": ["\nENV_VAR_ORDER = [\n        'JOB',\n        'SCENE',\n        'SCENE_NAME',\n        ] "], "extent": [4777, 4871]}, {"type": "para", "indent": 4, "text": ["will cause ", {"type": "code", "text": ["JOB"]}, " to be displayed first in the variable list if defined, followed\n    by ", {"type": "code", "text": ["SCENE"]}, " and ", {"type": "code", "text": ["SCENE_NAME"]}, ". Any other variables that defined by the scripts will\n    follow these in an arbitrary order."], "extent": [4871, 5084]}], "container": true}, {"type": "dt", "indent": 0, "text": ["OTL_PATTERN"], "extent": [5084, 5097], "body": [{"type": "para", "indent": 4, "text": ["A ", {"type": "em", "text": ["semicolon-separated"]}, " list of file patterns. The files mathcing the patterns will be\n    imported as asset libraries. For example"], "extent": [5097, 5234]}, {"lang": null, "type": "pre", "indent": 4, "text": ["\nOTL_PATTERN = JOB + '/Asset/*/Otl/*.otl\" "], "extent": [5234, 5287]}, {"type": "para", "indent": 4, "text": ["will import all otl files in the 'Otl' directories in the directories in the\n    'Asset' directory in your JOB directory."], "extent": [5287, 5415]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [5415, 5424], "body": [{"type": "para", "indent": 8, "text": ["You can add new patterns to OTL_PATTERN in different scripts to import scene\n        or shot specific assets with simple string concatenation."], "extent": [5424, 5576]}, {"lang": null, "type": "pre", "indent": 8, "text": ["\nOTL_PATTERN = OTL_PATTERN + ';' + SCENE + '/Otl/scene_specific.otl' "], "extent": [5576, 5660]}], "container": true}], "container": true, "role": "item_group"}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [5660, 5671], "body": [{"type": "para", "indent": 8, "text": ["Please note that the list separator is a semicolon (", {"type": "code", "text": [";"]}, ") on ", {"type": "em", "text": ["all"]}, " platforms\n        (including Linux/OSX where traditionally the colon character is used for this)."], "extent": [5671, 5846]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true}]}], "text": "Introduction"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [5846, 5858], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Variables"], "extent": [5858, 5874], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Refresh"], "extent": [5874, 5891], "body": [{"type": "para", "indent": 12, "text": ["Refresh all the variables and imports otls defined in ", {"type": "code", "text": ["OTL_PATTERN"]}, "."], "extent": [5891, 5977]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Add New Variable"], "extent": [5977, 6003], "body": [{"type": "para", "indent": 12, "text": ["Creates a new variable on the interface. You should leave the override flag\n            on for variables created with this method if you want to keep them during\n            refresh."], "extent": [6003, 6203]}], "container": true}, {"type": "dt", "indent": 8, "text": ["(variable list)"], "extent": [6203, 6228], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 12, "text": ["Name"], "extent": [6228, 6246], "body": [{"type": "para", "indent": 16, "text": ["Name of the variable."], "extent": [6246, 6284]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Value"], "extent": [6284, 6303], "body": [{"type": "para", "indent": 16, "text": ["Value of the variable."], "extent": [6303, 6342]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Override"], "extent": [6342, 6364], "body": [{"type": "para", "indent": 16, "text": ["If this toggle is checked the value doesn\u2019t get updated by the value defined\n                in the scripts."], "extent": [6364, 6489]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Delete"], "extent": [6489, 6509], "body": [{"type": "para", "indent": 16, "text": ["Delete variable from the interface and unset the the belonging variable."], "extent": [6509, 6599]}], "container": true}], "container": true}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Time"], "extent": [6599, 6613], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["FPS"], "extent": [6613, 6626], "body": [{"type": "para", "indent": 12, "text": ["You can define the FPS of your scenes but you can\u2019t override or delete it\n            from the interface of Environment qL. Use standard methods if you want to\n            change it temporarily."], "extent": [6626, 6834]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Settings"], "extent": [6834, 6848], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Site Env File"], "extent": [6848, 6871], "body": [{"type": "para", "indent": 12, "text": ["An (optional) global environment script file with a specified path.\n            (It doesn\u2019t need to be within the path of the hip file.)"], "extent": [6871, 7025]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Env File Pattern"], "extent": [7025, 7051], "body": [{"type": "para", "indent": 12, "text": ["File name pattern for the env script files.\n            Files matching this pattern will be treated as env scripts.\n            (For available wildcards, see the python ", {"type": "em", "text": ["glob"]}, " module.)"], "extent": [7051, 7253]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Refresh on File Load"], "extent": [7253, 7283], "body": [{"type": "para", "indent": 12, "text": ["Refreshes the environment on scene file open."], "extent": [7283, 7346]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Convert Backslash"], "extent": [7346, 7373], "body": [{"type": "para", "indent": 12, "text": ["Convert backslashes to forward slashes.\n            (Forward slashes work on all platform including Windows.)"], "extent": [7373, 7500]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Apply Path Mappings"], "extent": [7500, 7529], "body": [{"type": "para", "indent": 12, "text": ["Apply file system path mappings defined by the ", {"type": "code", "text": ["MAPPINGS"]}, " variable."], "extent": [7529, 7614]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Sort Variables"], "extent": [7614, 7638], "body": [{"type": "para", "indent": 12, "text": ["Sort variables according to the list in ", {"type": "code", "text": ["ENV_VAR_ORDER"]}, "."], "extent": [7638, 7712]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Import OTLs"], "extent": [7712, 7733], "body": [{"type": "para", "indent": 12, "text": ["Import OTL files matching the patterns defined in ", {"type": "code", "text": ["OTL_PATTERN"]}, "."], "extent": [7733, 7815]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Discard Special Variables"], "extent": [7815, 7850], "body": [{"type": "para", "indent": 12, "text": ["Discard variables that change the behavior of Environment qL itself\n            (", {"type": "code", "text": ["HIP"]}, ", ", {"type": "code", "text": ["HIPNAME"]}, ", ", {"type": "code", "text": ["ENV_SCRIPTS"]}, ", ", {"type": "code", "text": ["ENV_SCRIPT_NAME"]}, ", ", {"type": "code", "text": ["ENV_SCRIPT_PATH"]}, ")."], "extent": [7850, 8020]}, {"type": "para", "indent": 12, "text": ["Use this toggle if you want to check their values on the interface."], "extent": [8020, 8101]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Verbose (progress, debug)"], "extent": [8101, 8136], "body": [{"type": "para", "indent": 12, "text": ["Various levels of logging to the console (stderr)."], "extent": [8136, 8200]}, {"type": "para", "indent": 12, "text": ["If enabled, detailed progress messages are written to the console\n            about all operations performed (to help pinpointing of possible\n            issues)."], "extent": [8200, 8377]}], "container": true}], "container": true}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "Limitations", "container": true, "type": "Limitations_section", "indent": 0, "role": "section", "extent": [8377, 8390], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["\u2026"], "extent": [8390, 8402]}], "container": true}], "text": "Limitations"}, {"level": 1, "id": "todo", "container": true, "type": "todo_section", "indent": 0, "text": ["To Do"], "role": "section", "extent": [8402, 8414], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Refactoring in progress \u2013"], "extent": [8414, 8447], "body": [{"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": ["Finalize way(s) of message outputs (options for verbose debugging (?), etc.)"], "extent": [8447, 8534]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Function for substituting a regular path into a variable-based one"], "extent": [8534, 8611]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Describe extra funcs in help: msg(), warn(), err()"], "extent": [8611, 8672]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["\u2026"], "extent": [8672, 8688]}], "container": true}], "container": true}], "container": true}]}, {"level": 1, "id": "relnotes", "container": true, "type": "relnotes_section", "indent": 0, "text": ["Release Notes"], "role": "section", "extent": [8688, 8712], "body": [{"type": "para", "indent": 0, "text": [{"type": "em", "text": ["interface version 1"]}, " \u2014"], "extent": [8712, 8740]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["2021-03-27"], "extent": [8740, 8752], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Attempted python3 issue fix (was probably a bug that was tolerated under python 2.x) (", {"scheme": null, "value": "https://github.com/qLab/qLib/issues/1265", "type": "link", "text": ["#1265"], "exists": true}, ")"], "extent": [8752, 8895]}], "container": true}], "container": true}, {"type": "dt", "indent": 0, "text": ["2015-02-17"], "extent": [8895, 8907], "body": [{"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [8907, 8917], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["OTL_PATTERN"]}, " variable is now uses semicolon (", {"type": "code", "text": [";"]}, ") as separator ", {"type": "em", "text": ["on all platforms"]}, ".\n        Please update your configs accordingly."], "extent": [8917, 9070]}, {"type": "para", "indent": 8, "text": ["(The colon (", {"type": "code", "text": [":"]}, ") still works as a fallback on non-windows platforms, for backwards\n        compatibility.)"], "extent": [9070, 9186]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 0, "text": ["2014-10-04"], "extent": [9186, 9198], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["err() now automatically dumps traceback"], "extent": [9198, 9244]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["more informative messages in case of (python) errors in config files"], "extent": [9244, 9320]}], "container": true}], "container": true}, {"type": "dt", "indent": 0, "text": ["2014-09-29"], "extent": [9320, 9332], "body": [{"type": "para", "indent": 4, "text": ["Internal refactoring and cosmetics \u2013"], "extent": [9332, 9374]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Verbose logging of actions"], "extent": [9374, 9407]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Node is ignored if bypassed"], "extent": [9407, 9441]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Help card update"], "extent": [9441, 9465]}], "container": true}], "container": true}, {"type": "dt", "indent": 0, "text": ["2012-12-05"], "extent": [9465, 9477], "body": [{"type": "para", "indent": 4, "text": ["Matured the scheme based on user feedback."], "extent": [9477, 9524]}], "container": true}, {"type": "dt", "indent": 0, "text": ["2012-11-01"], "extent": [9524, 9536], "body": [{"type": "para", "indent": 4, "text": ["Initial release."], "extent": [9536, 9558]}], "container": true}], "container": true}]}], "title": ["Environment qL"], "summary": ["Sets environment variables defined in environment scripts and loads OTLs accordingly."]}