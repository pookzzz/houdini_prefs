{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "labs::filecache::2.0", "icon": "SOP/filecache", "tags": "io, optimize", "since": "19.0", "version": "2.0", "namespace": "labs"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["File Cache"], "extent": [0, 15]}, {"type": "summary", "indent": 0, "text": ["Caches (writes out once and then reads from) geometry (possibly animated) to disk."], "extent": [129, 220]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [220, 235], "body": [{"type": "para", "indent": 0, "text": ["This node is an extension over the functionalities of the ", {"scheme": "Node", "value": "/nodes/sop/filecache", "type": "link", "text": ["File Cache node"], "fullpath": "/nodes/sop/filecache.html"}, " to help you build up complex caching setups with ease:"], "extent": [235, 388]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["This node has a more extended TOP support. The main aim of this node is to provide tools for creating synchronized SOP and a TOP graphs with each other, that can cache your entire Houdini scene with multiple file caches and wedging options at a click of a button."], "extent": [388, 655]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["This file cache has built in wedging capability that can help you generate quick wedge variations while never leaving the SOP context. The Lab tools also provide a way to quickly populate wedge attributes on this node by ", {"keys": ["RMB"], "type": "keys", "text": null}, " on a parameter in your network (", {"type": "code", "text": ["integer"]}, ", ", {"type": "code", "text": ["float"]}, " or ", {"type": "code", "text": ["vector"]}, " type) and select Expression/Wedge Value\u2026 "], "extent": [655, 994]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["An extended HUD view."], "extent": [994, 1019]}], "container": true}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Cache Types"], "extent": [1019, 1039], "body": [{"type": "para", "indent": 0, "text": ["When the ", {"type": "ui", "text": ["File Path"]}, " is set to ", {"type": "ui", "text": ["Constructed"]}, " the node provides a simple way to create all the possible cache types:"], "extent": [1039, 1161]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"type": "ui", "text": ["Time Independent / Static Geometry / Model"]}], "extent": [1161, 1210], "body": [{"type": "para", "indent": 4, "text": ["This represents a single file on disk, useful to store models, environment, etc\u2026 The file name does not contain any reference to a frame number, therefore when it is loaded, the geometry will be Time Independent. To cache a static geometry, set ", {"type": "ui", "text": ["Time Dependent Cache"]}, " to ", {"type": "code", "text": ["off"]}, " before caching."], "extent": [1210, 1512]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"type": "ui", "text": ["Time Dependent / Geometry Sequence"]}], "extent": [1512, 1553], "body": [{"type": "para", "indent": 4, "text": ["This represents a sequence of files on disk, each individual file containing a reference to a frame number, which decides which file will be read in on a given frame. Therefore the loaded geometry will be Time Dependent. To cache a geometry sequence, make sure the ", {"type": "ui", "text": ["Time Dependent Cache"]}, " is set to ", {"type": "code", "text": ["on"]}, "."], "extent": [1553, 1864]}, {"type": "para", "indent": 4, "text": ["We can further differentiate between two types of geometry sequences, based on how they are cached to disk."], "extent": [1864, 1977]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "ui", "text": ["Animated Cache"]}, " (File Sequence without frame dependency)"], "extent": [1977, 2043], "body": [{"type": "para", "indent": 8, "text": ["Each frame of the sequence can be cached parallel and independently from one another, providing a fast way to cache your sequence. Useful to cache animated geometry sequences, or any other Time Dependent caches that are not based on a simulation. For this set ", {"type": "ui", "text": ["Simulation"]}, " to ", {"type": "code", "text": ["off"]}, "."], "extent": [2043, 2337]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "ui", "text": ["Simulation Cache"]}, " (File Sequence with frame dependency)"], "extent": [2337, 2402], "body": [{"type": "para", "indent": 8, "text": ["Each frame of the sequence depends on it\u2019s previous frame. Use this for caching out simulations where the simulation advances from one frame to the next. To cache out a simulation set ", {"type": "ui", "text": ["Simulation"]}, " to ", {"type": "code", "text": ["on"]}, "."], "extent": [2402, 2619]}], "container": true}], "container": true}], "container": true}], "container": true}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["SOP to TOP"], "extent": [2619, 2636], "body": [{"type": "para", "indent": 0, "text": ["Using this node, it is very easy to create a ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " referencing this node. "], "extent": [2636, 2762]}, {"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": [" To create a top network graph of your sop scene"], "role": "item", "extent": [2762, 2818], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Select the node and click on the ", {"scheme": "Icon", "value": "NETWORKS/top", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/top.html"}, " icon in the top right corner of its parameter interface. This will generate a ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " referencing this node. The default location for this is ", {"type": "code", "text": ["/obj/topnet1"]}, ", but you can change this path using the ", {"type": "ui", "text": ["Top File Cache In"]}, " parameter on the this node. Now both nodes are synchronized, ensuring that caching will generate the same output for both nodes."], "extent": [2818, 3272]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Repeat this step to create a ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " for each of your SOP ", {"scheme": "Node", "value": "/nodes/sop/filecache", "type": "link", "text": ["File Cache"], "fullpath": "/nodes/sop/filecache.html"}, " nodes in your scene. "], "extent": [3272, 3437]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Connect together the generated ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " in the same order as they are created in the sop network. "], "extent": [3437, 3588]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["After all ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " are connected, cook the last node to cache your entire scene file as one large process."], "extent": [3588, 3748]}], "container": true}], "container": true}], "container": true, "role": "item_group"}, {"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [3748, 3757], "body": [{"type": "para", "indent": 8, "text": ["Do not connect any other top nodes in between the ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " nodes, such as ", {"scheme": "Node", "value": "/nodes/top/wedge", "type": "link", "text": ["Wedge "], "fullpath": "/nodes/top/wedge.html"}, " or ", {"scheme": "Node", "value": "/nodes/top/ropgeometry", "type": "link", "text": ["ROP Geometry Output"], "fullpath": "/nodes/top/ropgeometry.html"}, " to change the work items. ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " has a built in wedging mechanism on its own. "], "extent": [3757, 4083]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Every node internally contains a ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " in a similar referenced fashion, to cook its work items when you click the ", {"type": "ui", "text": ["Save in Background"]}, " button. In an ideal workflow, upon clicking the ", {"scheme": "Icon", "value": "NETWORKS/top", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/top.html"}, " icon, a ", {"scheme": "Node", "value": "/nodes/top/topfetch", "type": "link", "text": ["TOP Fetch"], "fullpath": "/nodes/top/topfetch.html"}, " node should be generated at the given location, referencing the internal ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " of this node. However the  ", {"scheme": "Node", "value": "/nodes/top/topfetch", "type": "link", "text": ["TOP Fetch"], "fullpath": "/nodes/top/topfetch.html"}, " node has limitations that currently not support this workflow:"], "extent": [4083, 4624]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/topfetch", "type": "link", "text": ["TOP Fetch"], "fullpath": "/nodes/top/topfetch.html"}, " does not behave like you would expect after using similar nodes, such as ", {"scheme": "Node", "value": "/nodes/sop/object_merge", "type": "link", "text": ["Object Merge"], "fullpath": "/nodes/sop/object_merge.html"}, ", where you can keep continue working with the merge geometry, like merging never took place. ", {"scheme": "Node", "value": "/nodes/top/topfetch", "type": "link", "text": ["TOP Fetch"], "fullpath": "/nodes/top/topfetch.html"}, " can not bring in all your work items from a top node as they are, it only generates one work items per fetch, which is not ideal."], "extent": [4624, 5019]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/topfetch", "type": "link", "text": ["TOP Fetch"], "fullpath": "/nodes/top/topfetch.html"}, " only has one input, while multiple inputs are preferred for ease of use, such as on the ", {"scheme": "Node", "value": "/nodes/rop/fetch", "type": "link", "text": ["ROP Fetch"], "fullpath": "/nodes/rop/fetch.html"}, "."], "extent": [5019, 5168]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [5168, 5174], "body": [{"type": "para", "indent": 4, "text": ["For the reasons above, the ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " was never designed to be used a standalone tool which would replace the ", {"scheme": "Node", "value": "/nodes/top/ropgeometry", "type": "link", "text": ["ROP Geometry Output"], "fullpath": "/nodes/top/ropgeometry.html"}, ". Therefore you should always generate this node using the ", {"scheme": "Icon", "value": "NETWORKS/top", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/top.html"}, " icon of this node."], "extent": [5174, 5473]}], "container": true}], "container": true, "role": "item_group"}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [5473, 5478], "body": [{"type": "para", "indent": 4, "text": ["It is recommended to create your top graph under ", {"type": "code", "text": ["/obj"]}, ", rather then under ", {"type": "code", "text": ["/tasks"]}, " ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, ". The reason being is, if you need to copy paste your work into other scene files you can do that simply by selecting all the nodes inside your ", {"type": "code", "text": ["/obj"]}, " context at once, without forgetting anything. Any nodes live under ", {"type": "code", "text": ["/tasks"]}, ", ", {"type": "code", "text": ["/mat"]}, ", ", {"type": "code", "text": ["/img"]}, ", etc\u2026 can easily be forgotten and might break the pasted elements in the new scene you are trying to create."], "extent": [5478, 5975]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["SOP to OBJ"], "extent": [5975, 5992], "body": [{"type": "para", "indent": 0, "text": ["To render the geometry cache contained by this node, click the ", {"scheme": "Icon", "value": "NETWORKS/sop", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/sop.html"}, " icon on the node, which will create a ", {"scheme": "Node", "value": "/nodes/obj/labs::rendergeo::1.0", "type": "link", "text": ["Labs Render Geometry"], "exists": true}, " node inside ", {"type": "code", "text": ["/obj"]}, " by default. This way, you can easily generate a renderable object for all your caches needed to be rendered. ", {"scheme": "Node", "value": "/nodes/obj/labs::rendergeo::1.0", "type": "link", "text": ["Labs Render Geometry"], "exists": true}, " provides some further quality of live improvements, such as offsetting frames, or merging all frames or wedges without affecting the settings on this node, while has a more compact interface with the most needed parameters for rendering."], "extent": [5992, 6587]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["SOP to LOP"], "extent": [6587, 6604], "body": [{"type": "para", "indent": 0, "text": ["Currently, there is no straight ", {"scheme": "Node", "value": "/nodes/sop/filecache", "type": "link", "text": ["File Cache node"], "fullpath": "/nodes/sop/filecache.html"}, " to LOP workflow, the recommended way now is to generate a ", {"scheme": "Node", "value": "/nodes/obj/labs::rendergeo::1.0", "type": "link", "text": ["Labs Render Geometry"], "exists": true}, " and use a ", {"scheme": "Node", "value": "/nodes/lop/sopimport", "type": "link", "text": ["SOP Import"], "fullpath": "/nodes/lop/sopimport.html"}, " node to bring that into lop context."], "extent": [6604, 6865]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["File Cache and Karma"], "extent": [6865, 6892], "body": [{"type": "para", "indent": 0, "text": ["The ", {"scheme": "Node", "value": "/nodes/lop/labs::karma::2.0", "type": "link", "text": ["Labs Karma"], "exists": true}, " was designed to work together with this node. This means that it has similar interface, and provides the same control to setup renders, versioning and wedges. Therefore if you want keep working with these functionalities at the rendering stage of your work, you should be using the ", {"scheme": "Node", "value": "/nodes/lop/labs::karma::2.0", "type": "link", "text": ["Labs Karma"], "exists": true}, " node. Similarly, the ", {"scheme": "Node", "value": "/nodes/lop/labs::karma::2.0", "type": "link", "text": ["Labs Karma"], "exists": true}, " also has a ", {"scheme": "Icon", "value": "NETWORKS/top", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/top.html"}, " icon to help you easily integrate it in into your top graph. "], "extent": [6892, 7411]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Wedging"], "extent": [7411, 7425], "body": [{"type": "para", "indent": 0, "text": ["The other important feature of this node over the ", {"scheme": "Node", "value": "/nodes/sop/filecache", "type": "link", "text": ["File Cache node"], "fullpath": "/nodes/sop/filecache.html"}, " is the ability to do wedging using this node. The controls for wedging on this node trying to improve the functionalities of creating wedged attributes from what you would find on the ", {"scheme": "Node", "value": "/nodes/top/wedge", "type": "link", "text": ["Wedge"], "fullpath": "/nodes/top/wedge.html"}, " node. "], "extent": [7425, 7728]}, {"type": "para", "indent": 0, "text": ["The node only wedges ", {"type": "code", "text": ["float"]}, " type attributes, which is the most common type one would use. "], "extent": [7728, 7821]}, {"type": "para", "indent": 0, "text": ["To wedge other type of attributes, there is a new feature, ", {"type": "ui", "text": ["Attribute Values"]}, ", which lets you provide any points or primitive geometry with the desired attribute. This way you can fully customize the wedge values, either with the ", {"type": "ui", "text": ["Attribute Adjust"]}, " nodes or with your own preferred method. "], "extent": [7821, 8117]}, {"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": [" To wedge vector attributes"], "role": "item", "extent": [8117, 8152], "body": [{"type": "ord_group", "body": [{"blevel": 10, "type": "ord", "indent": 8, "text": ["In SOP context, place down a ", {"scheme": "Node", "value": "/nodes/sop/labs::filecache::2.0", "type": "link", "text": ["Labs File Cache "], "exists": true}, " and a ", {"scheme": "Node", "value": "/nodes/sop/xform", "type": "link", "text": ["Transform"], "fullpath": "/nodes/sop/xform.html"}, " node."], "extent": [8152, 8279]}, {"blevel": 10, "type": "ord", "indent": 8, "text": ["Right click on the Rotate parameter of the ", {"scheme": "Node", "value": "/nodes/sop/xform", "type": "link", "text": ["Transform"], "fullpath": "/nodes/sop/xform.html"}, " node and select Expression  \u2192 Wedge Value."], "extent": [8279, 8402]}, {"blevel": 10, "type": "ord", "indent": 8, "text": ["From the popup window, select the just created ", {"scheme": "Node", "value": "/nodes/sop/labs::filecache::2.0", "type": "link", "text": ["Labs File Cache "], "exists": true}, " node."], "extent": [8402, 8514]}, {"blevel": 10, "type": "ord", "indent": 8, "text": ["This will generate a ", {"scheme": "Node", "value": "/nodes/sop/pointgenerate", "type": "link", "text": ["Point Generate "], "fullpath": "/nodes/sop/pointgenerate.html"}, " node to create points representing the wedge count, while the ", {"scheme": "Node", "value": "/nodes/sop/attribadjustvector", "type": "link", "text": ["Attribute Adjust Vector "], "fullpath": "/nodes/sop/attribadjustvector.html"}, " will randomize the values per point. The ", {"scheme": "Node", "value": "/nodes/sop/labs::filecache::2.0", "type": "link", "text": ["Labs File Cache "], "exists": true}, " node is now configured to be able to use this geometry attribute as wedge values."], "extent": [8514, 8876]}], "container": true}], "container": true}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Nested Wedging"], "extent": [8876, 8899], "body": [{"type": "para", "indent": 0, "text": ["Nested wedging is important concept that allows you to create all possible variations of multiple wedge attributes. To create nested wedging using the ", {"scheme": "Node", "value": "/nodes/top/wedge", "type": "link", "text": ["Wedge "], "fullpath": "/nodes/top/wedge.html"}, " nodes, connect two of them together, similar to the following image:"], "extent": [8899, 9145]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nested_wedging.png", "type": "img", "text": ""}], "extent": [9145, 9181]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["When both of their ", {"type": "ui", "text": ["Wedge Count"]}, " is set to ", {"type": "code", "text": ["3"]}, ", the first ", {"scheme": "Node", "value": "/nodes/top/wedge", "type": "link", "text": ["Wedge "], "fullpath": "/nodes/top/wedge.html"}, " will generate 3 work items, while the second node triples that for the total of 9 work items. After setting up some wedge attributes and investigating their values on the second node, you would find that the first node\u2019s wedge attribute is now distributed in the following pattern"], "extent": [9181, 9548], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Index 0 "], "role": "th", "extent": [9548, 9563], "container": true}, {"type": "cell", "indent": 8, "text": ["Index 1 "], "role": "th", "extent": [9563, 9583], "container": true}, {"type": "cell", "indent": 12, "text": ["Index 2 "], "role": "th", "extent": [9583, 9606], "container": true}, {"type": "cell", "indent": 16, "text": ["Index 3 "], "role": "th", "extent": [9606, 9633], "container": true}, {"type": "cell", "indent": 20, "text": ["Index 4 "], "role": "th", "extent": [9633, 9664], "container": true}, {"type": "cell", "indent": 24, "text": ["Index 5 "], "role": "th", "extent": [9664, 9699], "container": true}, {"type": "cell", "indent": 28, "text": ["Index 6 "], "role": "th", "extent": [9699, 9738], "container": true}, {"type": "cell", "indent": 32, "text": ["Index 7 "], "role": "th", "extent": [9738, 9781], "container": true}, {"type": "cell", "indent": 36, "text": ["Index 8 "], "role": "th", "extent": [9781, 9828]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["0 "], "role": "td", "extent": [9828, 9836], "container": true}, {"type": "cell", "indent": 8, "text": ["0 "], "role": "td", "extent": [9836, 9848], "container": true}, {"type": "cell", "indent": 12, "text": ["0 "], "role": "td", "extent": [9848, 9864], "container": true}, {"type": "cell", "indent": 16, "text": ["1 "], "role": "td", "extent": [9864, 9884], "container": true}, {"type": "cell", "indent": 20, "text": ["1 "], "role": "td", "extent": [9884, 9908], "container": true}, {"type": "cell", "indent": 24, "text": ["1 "], "role": "td", "extent": [9908, 9936], "container": true}, {"type": "cell", "indent": 28, "text": ["2 "], "role": "td", "extent": [9936, 9968], "container": true}, {"type": "cell", "indent": 32, "text": ["2 "], "role": "td", "extent": [9968, 10004], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 36, "text": ["2"], "extent": [10004, 10043]}]}], "divider": false}]}], "container": true}, {"type": "dt", "indent": 0, "text": ["While wedge attributes created on the second ", {"scheme": "Node", "value": "/nodes/top/wedge", "type": "link", "text": ["Wedge "], "fullpath": "/nodes/top/wedge.html"}, " node will be generated in a periodic pattern as follows"], "extent": [10043, 10170], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Index 0 "], "role": "th", "extent": [10170, 10185], "container": true}, {"type": "cell", "indent": 8, "text": ["Index 1 "], "role": "th", "extent": [10185, 10205], "container": true}, {"type": "cell", "indent": 12, "text": ["Index 2 "], "role": "th", "extent": [10205, 10228], "container": true}, {"type": "cell", "indent": 16, "text": ["Index 3 "], "role": "th", "extent": [10228, 10255], "container": true}, {"type": "cell", "indent": 20, "text": ["Index 4 "], "role": "th", "extent": [10255, 10286], "container": true}, {"type": "cell", "indent": 24, "text": ["Index 5 "], "role": "th", "extent": [10286, 10321], "container": true}, {"type": "cell", "indent": 28, "text": ["Index 6 "], "role": "th", "extent": [10321, 10360], "container": true}, {"type": "cell", "indent": 32, "text": ["Index 7 "], "role": "th", "extent": [10360, 10403], "container": true}, {"type": "cell", "indent": 36, "text": ["Index 8 "], "role": "th", "extent": [10403, 10450]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["0 "], "role": "td", "extent": [10450, 10458], "container": true}, {"type": "cell", "indent": 8, "text": ["1 "], "role": "td", "extent": [10458, 10470], "container": true}, {"type": "cell", "indent": 12, "text": ["2 "], "role": "td", "extent": [10470, 10486], "container": true}, {"type": "cell", "indent": 16, "text": ["0 "], "role": "td", "extent": [10486, 10506], "container": true}, {"type": "cell", "indent": 20, "text": ["1 "], "role": "td", "extent": [10506, 10530], "container": true}, {"type": "cell", "indent": 24, "text": ["2 "], "role": "td", "extent": [10530, 10558], "container": true}, {"type": "cell", "indent": 28, "text": ["0 "], "role": "td", "extent": [10558, 10590], "container": true}, {"type": "cell", "indent": 32, "text": ["1 "], "role": "td", "extent": [10590, 10626], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 36, "text": ["2"], "extent": [10626, 10666]}]}], "divider": false}]}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["As a drawback however, to create these nested wedge patterns, you have to chain together multiple of these nodes, which in case of the this node would not be a valid workflow. "], "extent": [10666, 10844]}, {"type": "para", "indent": 0, "text": ["Therefore this node was designed to be able to create such patterns using a single node, when ", {"type": "ui", "text": ["Wedge Type"]}, " is set to ", {"type": "ui", "text": ["Batched Sequence"]}, " or ", {"type": "ui", "text": ["Periodic Sequence"]}, "."], "extent": [10844, 11011]}]}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [11011, 11023], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Load from Disk"], "extent": [11023, 11040], "body": [{"type": "para", "indent": 4, "text": ["When this is on, the node reads its output from the cached disk files, rather than cooking its input. When you click ", {"type": "ui", "text": ["Save to Disk"]}, " or ", {"type": "ui", "text": ["Save to Disk in Background"]}, " (on the ", {"type": "ui", "text": ["Caching"]}, " tab) to write out the cache files, the node automatically turns this checkbox on."], "extent": [11063, 11338]}], "container": true, "attrs": {"id": "loadfromdisk"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "file#reload", "type": "include", "indent": 0, "role": "item", "extent": [11338, 11361]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["File Path"], "extent": [11361, 11372], "body": [{"type": "para", "indent": 4, "text": ["When this is ", {"type": "ui", "text": ["Constructed"]}, " (the default), the node builds up the cache file path(s) from the values of various parameters, allowing features such as versioning and animation options. If you set this to ", {"type": "ui", "text": ["Explicit"]}, ", you need to ", {"scheme": null, "value": "/render/expressions", "type": "link", "text": ["manually write a single expression"], "fullpath": "/render/expressions.html"}, " in the ", {"type": "ui", "text": ["Geometry File"]}, " parameter with all the variables you want in the path (including the frame number when ", {"type": "ui", "text": ["Time dependent cache"]}, " is on)."], "extent": [11393, 11830]}], "container": true, "attrs": {"id": "filemethod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Dependent Cache"], "extent": [11830, 11852], "body": [{"type": "para", "indent": 4, "text": ["When this is on (the default), the node writes out a separate cache file for every frame (using the global frame start/end/increment from the timeline). If the input geometry is static (doesn\u2019t change based on the frame number), turn this off to avoid writing out multiple identical files."], "extent": [11876, 12171]}], "container": true, "attrs": {"id": "timedependent"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Base Name"], "extent": [12171, 12182], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["File Path"]}, " is ", {"type": "ui", "text": ["Constructed"]}, ", this is the first part of the cache file name. The default is ", {"type": "code", "text": ["$HIPNAME.$OS"]}, " (the name of the current scene file without the ", {"type": "code", "text": [".hip"]}, " extension, then a dot, then the name of this node). This is usually sufficient to prevent filename collisions between files/nodes if you give this node an meaningful, unique name (if you have two networks containing nodes both named ", {"type": "code", "text": ["filecache1"]}, ", you will get a collision). The drop down menu to the right of the text field has some more possible expressions."], "extent": [12201, 12737]}], "container": true, "attrs": {"id": "basename"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["File Type"], "extent": [12737, 12748], "body": [{"type": "para", "indent": 4, "text": ["The default is ", {"type": "code", "text": [".bgeo.sc"]}, ", which can handle any type of Houdini geometry and uses compression, so it\u2019s always safe to use. If ", {"type": "em", "text": ["all"]}, " the primitives in the input are ", {"type": "em", "text": ["always"]}, " VDB volumes, you can switch the file type to save the files directly as ", {"type": "code", "text": [".vdb"]}, ". When you set the ", {"type": "ui", "text": ["File type"]}, " to ", {"type": "code", "text": [".vdb"]}, ", the node converts Houdini\u2019s primitive attributes to VDB grid metadata, and detail attributes to file metadata."], "extent": [12767, 13178]}], "container": true, "attrs": {"id": "filetype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Base Folder"], "extent": [13178, 13191], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["File Path"]}, " is ", {"type": "ui", "text": ["Constructed"]}, ", this is the folder to save the cache files into. The default is ", {"type": "code", "text": ["$HIP/geo"]}, " (a folder named ", {"type": "code", "text": ["geo"]}, " in the same directory as the current scene file). (When ", {"type": "ui", "text": ["Version"]}, " is on it adds another directory level inside the base folder.)"], "extent": [13209, 13481]}], "container": true, "attrs": {"id": "basedir"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Open Directory"], "extent": [13481, 13497], "body": [{"type": "para", "indent": 4, "text": ["Click to show the contents of the ", {"type": "ui", "text": ["Base Folder"]}, " in the file manager. This can be useful when you want to clean up old cache files."], "extent": [13519, 13657]}], "container": true, "attrs": {"id": "openbasedir"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Version"], "extent": [13657, 13666], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["File Path"]}, " is ", {"type": "ui", "text": ["Constructed"]}, " and the checkbox to the left is on, the node adds a directory level (and filename part) to the cache file path(s) indicating the version. This lets you ", {"scheme": null, "value": "#versioning", "type": "link", "text": ["cache multiple variations"], "fullpath": "/nodes/top/labs--filecache-2.0.html#versioning", "fragment": "#versioning"}, " of the input network."], "extent": [13684, 13941]}], "container": true, "attrs": {"id": "version"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Geometry File"], "extent": [13941, 13956], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["File Path"]}, " is ", {"type": "ui", "text": ["Explicit"]}, ", the node uses this file path expression to generate the cache file path(s). This expression should ", {"scheme": null, "value": "/render/expressions", "type": "link", "text": ["include all the variables"], "fullpath": "/render/expressions.html"}, " you want in the path (including the frame number when ", {"type": "ui", "text": ["Time dependent cache"]}, " is on)"], "extent": [13971, 14246]}], "container": true, "attrs": {"id": "file"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Caching"], "extent": [14246, 14260], "body": [{"level": 3, "type": "sep", "indent": 0, "text": [" Cache "], "extent": [14260, 14275]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Overwrite Existing Cache"], "extent": [14275, 14302], "body": [{"type": "para", "indent": 4, "text": ["When this is enabled, caches are always overwritten on disk, when running ", {"type": "ui", "text": ["Save in Background"]}, ". Disable this to not to write to any existing files to disk."], "extent": [14329, 14492]}], "container": true, "attrs": {"id": "overwriteexisting"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save to Disk"], "extent": [147, 162], "body": [{"type": "para", "indent": 4, "text": ["Saves the geometry to disk with the last control settings."], "extent": [180, 244]}], "container": true, "attrs": {"id": "execute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save to Disk in Background"], "extent": [14531, 14559], "body": [{"type": "para", "indent": 4, "text": ["Use a TOP network to cook and save the cache files to disk in a separate background process. This allows you to keep working on other parts of Houdini. The cached frames will show up as they are completed by the other process."], "extent": [14584, 14816]}], "container": true, "attrs": {"id": "cookoutputnode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cancel Cook"], "extent": [14816, 14829], "body": [{"type": "para", "indent": 4, "text": ["Stops all background caching processes, if any exist."], "extent": [14848, 14907]}], "container": true, "attrs": {"id": "dirtyall"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [14907, 14912], "body": [{"type": "para", "indent": 4, "text": ["You can collapse the box around these buttons as a ", {"type": "q", "text": ["safety latch"]}, ", to prevent yourself from clicking them and rebuilding the cache accidentally."], "extent": [14912, 15063]}], "container": true}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Sequence "], "extent": [15063, 15080]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Evaluate As"], "extent": [15080, 15094], "body": [{"type": "para", "indent": 4, "text": ["When this is ", {"type": "ui", "text": ["Frame Range"]}, " the node writes a cache file for every frame (see Start/End/Inc below). If you don\u2019t want pre-generate all frames at once, or if you know you only need to regenerate a single changed frame, you can set this to ", {"type": "ui", "text": ["Single Frame"]}, ". This makes the node write out a cache file only for the current frame (or the frame you set in ", {"type": "ui", "text": ["Override frame"]}, "). If you need to provide a specific list of frames use ", {"type": "ui", "text": ["Specific Frames"]}, ". "], "extent": [15111, 15564]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Single Frame"], "extent": [15564, 15582], "body": [{"type": "para", "indent": 8, "text": ["Saves the cache on a single frame."], "extent": [15582, 15634]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Frame Range"], "extent": [15634, 15651], "body": [{"type": "para", "indent": 8, "text": ["Writes the cache for every frame in the frame range (see Start/End/Inc below)."], "extent": [15651, 15747]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Specific Frames"], "extent": [15747, 15768], "body": [{"type": "para", "indent": 8, "text": ["Sets the frames to write based on a list of independent range sequences or numbers."], "extent": [15768, 15861]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "trange"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Simulation"], "extent": [15861, 15873], "body": [{"type": "para", "indent": 4, "text": ["Use this when you are caching a sequence that is generated using a simulation, that makes each frame dependent on its previous frame. "], "extent": [15891, 16031]}], "container": true, "attrs": {"id": "cachesim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override Frame"], "extent": [16031, 16047], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Evaluate as"]}, " is ", {"type": "ui", "text": ["Single Frame"]}, " and the checkbox to the left is on, cache this explicit frame number instead of the current frame from the timeline."], "extent": [16047, 16210]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [669, 684], "body": [{"type": "para", "indent": 4, "text": ["Specifies the range of frames to render (start frame, end frame, and increment). All values may be floating point values. The range is inclusive. "], "extent": [695, 847]}, {"type": "para", "indent": 4, "text": ["These parameters determine the values of the local variables for the output driver."], "extent": [847, 936]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["$NRENDER"]}], "extent": [936, 952], "body": [{"type": "para", "indent": 8, "text": ["The number of frames to be rendered by the output driver."], "extent": [952, 1018]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["$N"]}], "extent": [1018, 1028], "body": [{"type": "para", "indent": 8, "text": ["The current frame being rendered (starting at 1 and going to ", {"type": "code", "text": ["$NRENDER"]}, ")."], "extent": [1028, 1111]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "f"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Substeps"], "extent": [16243, 16253], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Evaluate as"]}, " is ", {"type": "ui", "text": ["Frame range"]}, ", this is the number of fractional sub-frames to divide each frame into. Caching sub-frames increases the quality of motion blur rendering for cached animated geometry. If you set ", {"type": "ui", "text": ["Substeps"]}, " greater than ", {"type": "code", "text": ["1"]}, " and you've set ", {"type": "ui", "text": ["File Path"]}, " to ", {"type": "ui", "text": ["Explicit"]}, ", make sure your explicit path expression can handle fractional frames, by using ", {"type": "code", "text": ["$T"]}, " (floating point time in seconds) or ", {"type": "code", "text": ["$FF"]}, " (fractional frame number) instead of ", {"type": "code", "text": ["$F"]}, " (whole frame number)."], "extent": [16272, 16762]}], "container": true, "attrs": {"id": "substeps"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["List of Frames"], "extent": [16762, 16778], "body": [{"type": "para", "indent": 4, "text": ["Sets the frame values by a list of independent range sequences or numbers. The listings can be separated by whitespace, commas and semi-colons. Use the syntax ", {"type": "code", "text": ["min-max:stepsize"]}, ", which expands to values between ", {"type": "code", "text": ["min"]}, " and ", {"type": "code", "text": ["max"]}, ", separated by ", {"type": "code", "text": ["stepsize"]}, ". When ", {"type": "code", "text": ["stepsize"]}, " is not provided, the default value of  ", {"type": "code", "text": ["1"]}, " is used. Currently this functionality is under development, and in case when ", {"type": "ui", "text": ["Simulation"]}, " is set to ", {"type": "code", "text": ["1"]}, ", this might not work as expected. "], "extent": [16801, 17259]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Value List "], "role": "th", "extent": [17259, 17277], "container": true}, {"type": "cell", "indent": 8, "text": ["Expanded Values "], "role": "th", "extent": [17277, 17305]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["5 "], "role": "td", "extent": [17305, 17326], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["5.0 "], "extent": [17326, 17340]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["3;5 7 "], "role": "td", "extent": [17340, 17364], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["3.0, 5.0, 7.0"], "extent": [17364, 17387]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["1-3 "], "role": "td", "extent": [17387, 17405], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["1.0, 2.0, 3.0"], "extent": [17405, 17428]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["0-1:0.25 "], "role": "td", "extent": [17428, 17443], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["0.0, 0.25, 0.5, 0.75, 1.0"], "extent": [17443, 17478]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["0-1:0.25 5; 8-12:2 "], "role": "td", "extent": [17478, 17503], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["0.0, 0.25, 0.5, 0.75, 1.0, 5.0, 8.0, 10.0, 12.0 "], "extent": [17503, 17561]}]}], "divider": false}]}], "container": true, "attrs": {"id": "specificrange"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Wedging "], "extent": [17561, 17577]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable Wedging"], "extent": [17577, 17594], "body": [{"type": "para", "indent": 4, "text": ["Enabled wedging for this cache to create different variations of the same cache with different attribute values."], "extent": [17617, 17739]}], "container": true, "attrs": {"id": "enablewedging"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Evaluate As"], "extent": [17739, 17752], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Save in Background"]}, " is used, it sets the amount of work items to be cached by this node. "], "extent": [17768, 17871]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Wedges"], "extent": [17871, 17895], "body": [{"type": "para", "indent": 8, "text": ["Write all wedges to disk. "], "extent": [17895, 17931]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Single Wedge"], "extent": [17931, 17949], "body": [{"type": "para", "indent": 8, "text": ["Write only a single given wedge."], "extent": [17949, 17999]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Range"], "extent": [17999, 18017], "body": [{"type": "para", "indent": 8, "text": ["Write wedges contained in the given range."], "extent": [18017, 18077]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Specific Wedges"], "extent": [18077, 18098], "body": [{"type": "para", "indent": 8, "text": ["Write wedges by a list of independent range values or numbers."], "extent": [18098, 18178]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "wrange"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Single Wedge"], "extent": [18178, 18192], "body": [{"type": "para", "indent": 4, "text": ["Sets the wedge number to write to disk. Use this one you only want to correct a single wedge out of many."], "extent": [18215, 18330]}], "container": true, "attrs": {"id": "wedgeoverride"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["List of Wedges"], "extent": [18330, 18346], "body": [{"type": "para", "indent": 4, "text": ["Sets the wedge values by a list of independent range sequences or numbers. The listings can be separated by whitespace, commas and semi-colons. Use the syntax ", {"type": "code", "text": ["min-max:stepsize"]}, ", which expands to values between ", {"type": "code", "text": ["min"]}, " and ", {"type": "code", "text": ["max"]}, ", separated by ", {"type": "code", "text": ["stepsize"]}, ". When ", {"type": "code", "text": ["stepsize"]}, " is not provided, the default value of  ", {"type": "code", "text": ["1"]}, " is used. "], "extent": [18370, 18697]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Value List "], "role": "th", "extent": [18697, 18715], "container": true}, {"type": "cell", "indent": 8, "text": ["Expanded Values "], "role": "th", "extent": [18715, 18743]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["5 "], "role": "td", "extent": [18743, 18764], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["5.0 "], "extent": [18764, 18778]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["3;5 7 "], "role": "td", "extent": [18778, 18802], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["3.0, 5.0, 7.0"], "extent": [18802, 18825]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["1-3 "], "role": "td", "extent": [18825, 18843], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["1.0, 2.0, 3.0"], "extent": [18843, 18866]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["0-1:0.25 "], "role": "td", "extent": [18866, 18881], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["0.0, 0.25, 0.5, 0.75, 1.0"], "extent": [18881, 18916]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["0-1:0.25 5; 8-12:2 "], "role": "td", "extent": [18916, 18941], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["0.0, 0.25, 0.5, 0.75, 1.0, 5.0, 8.0, 10.0, 12.0 "], "extent": [18941, 19004]}]}], "divider": false}]}], "container": true, "attrs": {"id": "specificwedges"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Wedge Range"], "extent": [19004, 19017], "body": [{"type": "para", "indent": 4, "text": ["All wedges in this range will be written to disk."], "extent": [19037, 19092]}], "container": true, "attrs": {"id": "wedgerange"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Wedge Count"], "extent": [19092, 19105], "body": [{"type": "para", "indent": 4, "text": ["The total number of copies to create for wedging. "], "extent": [19125, 19181]}], "container": true, "attrs": {"id": "wedgecount"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clean Wedges"], "extent": [19181, 19195], "body": [{"type": "para", "indent": 4, "text": ["Lists the available wedges of the current version in a window for deletion. "], "extent": [19216, 19302]}], "container": true, "attrs": {"id": "cleanwedges"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Number of Attributes "], "extent": [19302, 19331]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Attribute Name"], "extent": [19331, 19348], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute to wedge. Use the ", {"type": "code", "text": ["@"]}, " syntax followed by this name on any parameter in your network to make that parameter change values for each wedge."], "extent": [19365, 19537]}], "container": true, "attrs": {"id": "attrib#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Wedge Type"], "extent": [19537, 19549], "body": [{"type": "para", "indent": 4, "text": ["Sets how the wedge values are distributed for all wedges. "], "extent": [19569, 19637]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [19637, 19652], "body": [{"type": "para", "indent": 8, "text": ["Distributes values in increasing fashion from ", {"type": "code", "text": ["0"]}, " to ", {"type": "code", "text": ["Wedge Count-1"]}, ". This is the default, as the most common wedge workflow is to change the ", {"type": "ui", "text": ["Select Input"]}, " parameter of a ", {"scheme": "Node", "value": "/nodes/sop/switch", "type": "link", "text": ["Switch "], "fullpath": "/nodes/sop/switch.html"}, " node, which needs increasing integer values from ", {"type": "code", "text": ["0"]}, "."], "extent": [19652, 19923]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Range"], "extent": [19923, 19941], "body": [{"type": "para", "indent": 8, "text": ["Evenly distributes values between ", {"type": "ui", "text": ["Min Value"]}, " and ", {"type": "ui", "text": ["Max Value"]}, " parameters based on the number of wedges. Use this when you want to see the affect of a parameter value between a start and an end point."], "extent": [19941, 20162]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Random Sample"], "extent": [20162, 20181], "body": [{"type": "para", "indent": 8, "text": ["Randomly picks a value for each wedge, between the given range by ", {"type": "ui", "text": ["Min Value"]}, " and ", {"type": "ui", "text": ["Max Value"]}, "."], "extent": [20181, 20297]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Batched Sequence"], "extent": [20297, 20319], "body": [{"type": "para", "indent": 8, "text": ["Distributes values used for nested wedging. The number of unique values in the sequence depends on the ", {"type": "ui", "text": ["Batch Size"]}, ", and the values are evenly distributed between ", {"type": "ui", "text": ["Min Value"]}, " and ", {"type": "ui", "text": ["Max Value"]}, ". ", {"type": "ui", "text": ["Wedge Count"]}, " should be some multiple of ", {"type": "ui", "text": ["Batch Size"]}, ". "], "extent": [20319, 20594]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Periodic Sequence"], "extent": [20594, 20617], "body": [{"type": "para", "indent": 8, "text": ["Distributes values used for nested wedging. The ", {"type": "ui", "text": ["Period Size"]}, " sets how many times to cycle the pattern across the sequence, and the values are evenly distributed between ", {"type": "ui", "text": ["Min Value"]}, " and ", {"type": "ui", "text": ["Max Value"]}, ". ", {"type": "ui", "text": ["Wedge Count"]}, " should be some multiple of ", {"type": "ui", "text": ["Period Size"]}, "."], "extent": [20617, 20891]}], "container": true}, {"type": "dt", "indent": 4, "text": ["List of Values"], "extent": [20891, 20911], "body": [{"type": "para", "indent": 8, "text": ["Sets the wedge values by a list of independent range sequences or numbers. "], "extent": [20911, 21004]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Attribute Values"], "extent": [21004, 21026], "body": [{"type": "para", "indent": 8, "text": ["Sets the wedge values by looking up point or primitive attribute values on a geometry. The geometry attribute has to have the same name as the ", {"type": "ui", "text": ["Attribute Name"]}, ", and the element number corresponds the the wedge number."], "extent": [21026, 21263]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "wedgetype#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Min Value"], "extent": [21263, 21274], "body": [{"type": "para", "indent": 4, "text": ["Sets the minimum possible value when ", {"type": "ui", "text": ["Wedge Type"]}, " is set to ", {"type": "ui", "text": ["Custom Range"]}, ", ", {"type": "ui", "text": ["Random Samples"]}, ", ", {"type": "ui", "text": ["Batched Sequence"]}, " or ", {"type": "ui", "text": ["Periodic Sequence"]}, "."], "extent": [21293, 21449]}], "container": true, "attrs": {"id": "minvalue#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Value"], "extent": [21449, 21460], "body": [{"type": "para", "indent": 4, "text": ["Sets the maximum possible value when ", {"type": "ui", "text": ["Wedge Type"]}, " is set to ", {"type": "ui", "text": ["Custom Range"]}, ", ", {"type": "ui", "text": ["Random Samples"]}, ", ", {"type": "ui", "text": ["Batched Sequence"]}, " or ", {"type": "ui", "text": ["Periodic Sequence"]}, "."], "extent": [21479, 21631]}], "container": true, "attrs": {"id": "maxvalue#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Seed"], "extent": [21631, 21637], "body": [{"type": "para", "indent": 4, "text": ["All generated values depend randomly on this value. Choose a different value if the current seed produces undesirable samples. "], "extent": [21658, 21791]}], "container": true, "attrs": {"id": "randomseed#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Batch Size"], "extent": [21791, 21803], "body": [{"type": "para", "indent": 4, "text": ["Sets the number of unique values to create in the sequence. ", {"type": "ui", "text": ["Wedge Count"]}, " should be multiple of this value to evenly distribute the pattern."], "extent": [21823, 21971]}], "container": true, "attrs": {"id": "batchsize#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Period Size"], "extent": [21971, 21984], "body": [{"type": "para", "indent": 4, "text": ["Sets how many times to cycle the pattern in the sequence. ", {"type": "ui", "text": ["Wedge Count"]}, " should be multiple of this value to evenly distribute the pattern."], "extent": [22005, 22151]}], "container": true, "attrs": {"id": "periodsize#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["List of Values"], "extent": [22151, 22167], "body": [{"type": "para", "indent": 4, "text": ["Sets the wedge values by a list of independent range sequences or numbers. The listings can be separated by whitespace, commas and semi-colons. Use the syntax ", {"type": "code", "text": ["min-max:stepsize"]}, ", which expands to values between ", {"type": "code", "text": ["min"]}, " and ", {"type": "code", "text": ["max"]}, ", separated by ", {"type": "code", "text": ["stepsize"]}, ". When ", {"type": "code", "text": ["stepsize"]}, " is not provided, the default value of  ", {"type": "code", "text": ["1"]}, " is used.  "], "extent": [22184, 22512]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Value List "], "role": "th", "extent": [22512, 22530], "container": true}, {"type": "cell", "indent": 8, "text": ["Expanded Values "], "role": "th", "extent": [22530, 22558]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["5 "], "role": "td", "extent": [22558, 22579], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["5.0 "], "extent": [22579, 22593]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["3;5 7 "], "role": "td", "extent": [22593, 22617], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["3.0, 5.0, 7.0"], "extent": [22617, 22640]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["1-3 "], "role": "td", "extent": [22640, 22658], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["1.0, 2.0, 3.0"], "extent": [22658, 22681]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["0-1:0.25 "], "role": "td", "extent": [22681, 22696], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["0.0, 0.25, 0.5, 0.75, 1.0"], "extent": [22696, 22731]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["0-1:0.25 5; 8-12:2 "], "role": "td", "extent": [22731, 22756], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["0.0, 0.25, 0.5, 0.75, 1.0, 5.0, 8.0, 10.0, 12.0        "], "extent": [22756, 22821]}]}], "divider": false}]}], "container": true, "attrs": {"id": "values#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Geometry Path"], "extent": [22821, 22836], "body": [{"type": "para", "indent": 4, "text": ["The path to the geometry to use for attribute value lookup."], "extent": [22854, 22923]}], "container": true, "attrs": {"id": "geopath#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Geometry"], "extent": [22923, 22940], "body": [{"type": "para", "indent": 4, "text": ["This will generate a small network to help you setup the geometry for wedging in a procedural way."], "extent": [22965, 23073]}], "container": true, "attrs": {"id": "createwedgegeo#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Default Value"], "extent": [23073, 23088], "body": [{"type": "para", "indent": 4, "text": ["The value given to the wedge attribute when there is a mismatch between the total number of wedges and the elements found on the geometry (when ", {"type": "ui", "text": ["Wedge Type"]}, " is set to ", {"type": "ui", "text": ["Attribute Values"]}, ")."], "extent": [23112, 23320]}], "container": true, "attrs": {"id": "valuesdefault#"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Load "], "extent": [23320, 23333]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Clamp First Frame"], "extent": [23333, 23353], "body": [{"type": "para", "indent": 4, "text": ["Optional clamping of the first frame of the cached sequence. Use this if you want your sequence cache to exists before the start frame (by default given by ", {"type": "ui", "text": ["Start/End/Inc"]}, ")."], "extent": [23373, 23556]}], "container": true, "attrs": {"id": "clampfirst"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clamp Last Frame"], "extent": [23556, 23574], "body": [{"type": "para", "indent": 4, "text": ["Optional clamping of the last frame of the cached sequence. Use this if you want your sequence cache to exists after the end frame (by default given by ", {"type": "ui", "text": ["Start/End/Inc"]}, ")."], "extent": [23593, 23774]}], "container": true, "attrs": {"id": "clamplast"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Merge Frames"], "extent": [23774, 23788], "body": [{"type": "para", "indent": 4, "text": ["Merges all the frames of a ", {"type": "code", "text": ["Time Dependent"]}, " cache to a single ", {"type": "code", "text": ["Time Independent"]}, " cache for the output."], "extent": [23811, 23927]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Frames to Merge"], "extent": [23927, 23948], "body": [{"type": "para", "indent": 8, "text": ["Sets which frames to merge together."], "extent": [23973, 24019]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["All Frames"], "extent": [24019, 24039], "body": [{"type": "para", "indent": 12, "text": ["Merge all frames together in the range (by default given by ", {"type": "ui", "text": ["Start/End/Inc"]}, ")."], "extent": [24039, 24132]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom Range"], "extent": [24132, 24154], "body": [{"type": "para", "indent": 12, "text": ["Provide a custom range to merge."], "extent": [24154, 24212]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Specific Frames"], "extent": [24212, 24237], "body": [{"type": "para", "indent": 12, "text": ["Sets the frame values by a list of independent range sequences or numbers.    "], "extent": [24237, 24341]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "mergeframes"}}, {"type": "dt", "indent": 4, "text": ["Frame Range"], "extent": [24341, 24358], "body": [{"type": "para", "indent": 8, "text": ["The custom range to use for merging frames together."], "extent": [24387, 24449]}], "container": true, "attrs": {"id": "mergeframerange"}}, {"type": "dt", "indent": 4, "text": ["Substeps"], "extent": [24449, 24463], "body": [{"type": "para", "indent": 8, "text": ["The substeps to use for the range. Usually this should be the same as ", {"type": "ui", "text": ["Substeps"]}, ". "], "extent": [24490, 24584]}], "container": true, "attrs": {"id": "mergesubsteps"}}, {"type": "dt", "indent": 4, "text": ["List of Frames"], "extent": [24584, 24604], "body": [{"type": "para", "indent": 8, "text": ["Sets the frame values by a list of independent range sequences or numbers. The listings can be separated by whitespace, commas and semi-colons. Use the syntax ", {"type": "code", "text": ["min-max:stepsize"]}, ", which expands to values between ", {"type": "code", "text": ["min"]}, " and ", {"type": "code", "text": ["max"]}, ", separated by ", {"type": "code", "text": ["stepsize"]}, ". When ", {"type": "code", "text": ["stepsize"]}, " is not provided, the default value of  ", {"type": "code", "text": ["1"]}, " is used.  "], "extent": [24636, 24968]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Value List "], "role": "th", "extent": [24968, 24990], "container": true}, {"type": "cell", "indent": 12, "text": ["Expanded Values "], "role": "th", "extent": [24990, 25022]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["5 "], "role": "td", "extent": [25022, 25047], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["5.0 "], "extent": [25047, 25065]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["3;5 7 "], "role": "td", "extent": [25065, 25093], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["3.0, 5.0, 7.0"], "extent": [25093, 25120]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["1-3 "], "role": "td", "extent": [25120, 25142], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["1.0, 2.0, 3.0"], "extent": [25142, 25169]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["0-1:0.25 "], "role": "td", "extent": [25169, 25188], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["0.0, 0.25, 0.5, 0.75, 1.0"], "extent": [25188, 25227]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["0-1:0.25 5; 8-12:2 "], "role": "td", "extent": [25227, 25256], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["0.0, 0.25, 0.5, 0.75, 1.0, 5.0, 8.0, 10.0, 12.0   "], "extent": [25256, 25320]}]}], "divider": false}]}], "container": true, "attrs": {"id": "mergespecificrange"}}, {"type": "dt", "indent": 4, "text": ["Merge Wedges"], "extent": [25320, 25338], "body": [], "container": true, "attrs": {"id": "domergewedges         Merges all the wedges together, creating a single, either `Time Dependent` or `Time Independent` cache without wedging for the output."}}, {"type": "dt", "indent": 4, "text": ["Wedges to Merge"], "extent": [25510, 25531], "body": [{"type": "para", "indent": 8, "text": ["Sets which wedges to merge together."], "extent": [25556, 25602]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["All Wedges"], "extent": [25602, 25622], "body": [{"type": "para", "indent": 12, "text": ["Merge all wedges together."], "extent": [25622, 25662]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Custom Range"], "extent": [25662, 25684], "body": [{"type": "para", "indent": 12, "text": ["Provide a custom range to merge."], "extent": [25684, 25730]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Specific Wedges"], "extent": [25730, 25755], "body": [{"type": "para", "indent": 13, "text": ["Sets the wedge values by a list of independent range sequences or numbers. "], "extent": [25755, 25845]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "mergewedges"}}, {"type": "dt", "indent": 4, "text": ["Wedge Range"], "extent": [25845, 25863], "body": [{"type": "para", "indent": 8, "text": ["The custom range to use for the merge."], "extent": [25895, 25951]}], "container": true, "attrs": {"id": "mergewedgeidxrange"}}, {"type": "dt", "indent": 4, "text": ["List of Wedges"], "extent": [25951, 25971], "body": [{"type": "para", "indent": 8, "text": ["Sets the wedge values by a list of independent range sequences or numbers. The listings can be separated by whitespace, commas and semi-colons. Use the syntax ", {"type": "code", "text": ["min-max:stepsize"]}, ", which expands to values between ", {"type": "code", "text": ["min"]}, " and ", {"type": "code", "text": ["max"]}, ", separated by ", {"type": "code", "text": ["stepsize"]}, ". When ", {"type": "code", "text": ["stepsize"]}, " is not provided, the default value of  ", {"type": "code", "text": ["1"]}, " is used.  "], "extent": [26004, 26336]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Value List "], "role": "th", "extent": [26336, 26358], "container": true}, {"type": "cell", "indent": 12, "text": ["Expanded Values "], "role": "th", "extent": [26358, 26390]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["5 "], "role": "td", "extent": [26390, 26415], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["5.0 "], "extent": [26415, 26433]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["3;5 7 "], "role": "td", "extent": [26433, 26461], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["3.0, 5.0, 7.0"], "extent": [26461, 26488]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["1-3 "], "role": "td", "extent": [26488, 26510], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["1.0, 2.0, 3.0"], "extent": [26510, 26537]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["0-1:0.25 "], "role": "td", "extent": [26537, 26556], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["0.0, 0.25, 0.5, 0.75, 1.0"], "extent": [26556, 26595]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["0-1:0.25 5; 8-12:2 "], "role": "td", "extent": [26595, 26624], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["0.0, 0.25, 0.5, 0.75, 1.0, 5.0, 8.0, 10.0, 12.0   "], "extent": [26624, 26689]}]}], "divider": false}]}], "container": true, "attrs": {"id": "mergespecificwedges"}}], "container": true}], "container": true, "attrs": {"id": "domergeframes"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "file#loadtype", "type": "include", "indent": 0, "role": "item", "extent": [26689, 26714]}, {"ext": "file#packedviewedit", "type": "include", "indent": 0, "role": "item", "extent": [26714, 26745]}, {"ext": "file#viewportlod", "type": "include", "indent": 0, "role": "item", "extent": [26745, 26773]}, {"ext": "file#packexpanded", "type": "include", "indent": 0, "role": "item", "extent": [26773, 26802]}, {"ext": "file#delayload", "type": "include", "indent": 0, "role": "item", "extent": [26802, 26828]}, {"ext": "file#index", "type": "include", "indent": 0, "role": "item", "extent": [26828, 26850]}, {"ext": "file#wrap", "type": "include", "indent": 0, "role": "item", "extent": [26850, 26872]}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Scheduling"], "extent": [26872, 26889], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["TOP Scheduler Override"], "extent": [6683, 6707], "body": [{"type": "para", "indent": 4, "text": ["This parameter overrides the TOP scheduler for this node."], "extent": [6730, 6793]}], "container": true, "attrs": {"id": "topscheduler"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Local "], "extent": [26934, 26948]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Frames per Batch"], "extent": [26948, 26967], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Time Dependent Cache"]}, " is enabled, and ", {"type": "ui", "text": ["Simulation"]}, " is off, it sets how many frames to schedule as one unit. For every batch a new Houdini process will run in the background, each opening the scene file for the period of time to cook all the frames in the batch (by default 10). When the scene file\u2019s loading time is longer then the actual caching process, it is recommended to increase this number to even 50 or a higher number for overall faster caching. When caching time independent cache or running it as a simulation, the frames per batch value always considered as 1, therefore this parameter is disabled."], "extent": [26991, 27618]}], "container": true, "attrs": {"id": "framesperbatch"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["One Batch at a Time"], "extent": [27618, 27639], "body": [{"type": "para", "indent": 4, "text": ["This will ensure to only run one Houdini process in the background to cook all the batches. When caching time independent cache or running it as a simulation, the frames per batch value always considered as 1, therefore this parameter is disabled."], "extent": [27661, 27921]}], "container": true, "attrs": {"id": "local_single"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["CPUs per Batch"], "extent": [27921, 27937], "body": [{"type": "para", "indent": 4, "text": ["The number of logical cores to use for cooking a single batch. This will ensure to open the Houdini process in the background with the given amount of logical cores. The total amount of logical cores the batches can use all combined is limited by the ", {"type": "ui", "text": ["CPU Count to Use"]}, " option. "], "extent": [27964, 28250]}], "container": true, "attrs": {"id": "local_CPUs_to_use"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["CPU Count to Use"], "extent": [28250, 28268], "body": [{"type": "para", "indent": 4, "text": ["Sets the limit on the number of logical cores to use for the entire cooking process. The menu provides a variety of configurations to quickly assign more logical cores to the caching process, which is displayed as a number on the right side of this parameter. "], "extent": [28290, 28564]}], "container": true, "attrs": {"id": "maxprocsmenu"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["CPU Count"], "extent": [28564, 28575], "body": [{"type": "para", "indent": 4, "text": ["Sets the amount of logical cores to set as the limit for the cooking process."], "extent": [28593, 28676]}], "container": true, "attrs": {"id": "maxprocs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Memory"], "extent": [28676, 28684], "body": [{"type": "para", "indent": 4, "text": ["Sets the minimum amount of memory required."], "extent": [28713, 28762]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Minimum"], "extent": [28762, 28778], "body": [{"type": "para", "indent": 8, "text": ["Do not set any memory limit."], "extent": [28778, 28816]}], "container": true}, {"type": "dt", "indent": 4, "text": ["MB Available"], "extent": [28816, 28834], "body": [{"type": "para", "indent": 8, "text": ["Sets the memory limit in unit of MB."], "extent": [28834, 28880]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Percent Available"], "extent": [28880, 28903], "body": [{"type": "para", "indent": 8, "text": ["Sets the memory limit as percentage."], "extent": [28903, 28948]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "local_useminfreemem"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["MB"], "extent": [28948, 28952], "body": [{"type": "para", "indent": 4, "text": ["This amount of memory in MB has to be available for a batch to start the cooking process."], "extent": [28978, 29073]}], "container": true, "attrs": {"id": "local_minfreemem"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Percent"], "extent": [29073, 29082], "body": [{"type": "para", "indent": 4, "text": ["The precent of memory has to be free for a batch to start the cooking process."], "extent": [29111, 29195]}], "container": true, "attrs": {"id": "local_minfreemempct"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Save Filters"], "extent": [29195, 29214], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Filter Geometry by"], "extent": [29214, 29235], "body": [{"type": "para", "indent": 4, "text": ["Deletes geometry based on the current frame number or the current wedge index compared against an existing attribute on the incoming geometry."], "extent": [29254, 29404]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["None"], "extent": [29404, 29414], "body": [{"type": "para", "indent": 8, "text": ["Keep the incoming geometry"], "extent": [29414, 29450]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Frame Number"], "extent": [29450, 29468], "body": [{"type": "para", "indent": 8, "text": ["Compares the incoming attribute value against the current frame number."], "extent": [29468, 29557]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Wedge Index"], "extent": [29557, 29574], "body": [{"type": "para", "indent": 8, "text": ["Compares the incoming attribute value against the current wedge index."], "extent": [29574, 29662]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "filtergeo"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute Type"], "extent": [29662, 29678], "body": [{"type": "para", "indent": 4, "text": ["The type of the attribute to use for comparison. "], "extent": [29698, 29753]}], "container": true, "attrs": {"id": "filtertype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Piece Attribute"], "extent": [29753, 29770], "body": [{"type": "para", "indent": 4, "text": ["The attribute to use for comparison. The attribute can be an ", {"type": "code", "text": ["integer"]}, " type or a ", {"type": "code", "text": ["string"]}, " type which ends on a numeric value for comparison. "], "extent": [29791, 29938]}], "container": true, "attrs": {"id": "pieceattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delete Attributes"], "extent": [29938, 29957], "body": [{"type": "para", "indent": 4, "text": ["A space separated list of attributes to delete from the geometry before saving it. If you know there are attributes on the input geometry you don\u2019t need in the rest of the network, you can decrease the cache file size and make cache loading faster by preventing the attributes from being included in the cache. The names will match at any level (vertex, point, primitive, or detail). The node will never delete the ", {"type": "code", "text": ["P"]}, " (position) point attribute. You can use patterns, for example ", {"type": "code", "text": ["* ^v"]}, " to delete all attributes except ", {"type": "code", "text": ["P"]}, " and ", {"type": "code", "text": ["v"]}, "."], "extent": [29984, 30522]}], "container": true, "attrs": {"id": "deleteattributes"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delete Groups"], "extent": [30522, 30537], "body": [{"type": "para", "indent": 4, "text": ["A space separated list of groups to delete from the geometry before saving it. This can be useful with simulation data, where there can be groups in the output you will never use. You can decrease the cache file size and make cache loading faster by preventing these groups from being included in the cache."], "extent": [30560, 30873]}], "container": true, "attrs": {"id": "deletegroups"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Number of Casts"], "extent": [30873, 30890], "body": [{"type": "para", "indent": 4, "text": ["If you know you don\u2019t need full precision for certain attributes in the input, this multi-parm lets you convert the attributes to lower-precision types before saving the geometry. This can make the cache files smaller and faster to load (depending on how many uses of the attribute there are). Set the number or click the plus or minus buttons to set the number of conversions to do."], "extent": [30909, 31298]}, {"type": "para", "indent": 4, "text": ["See the ", {"scheme": "Node", "value": "/nodes/sop/attribcast", "type": "link", "text": ["Attribute Cast SOP"], "fullpath": "/nodes/sop/attribcast.html"}, " help for more information. "], "extent": [31298, 31380]}], "container": true, "attrs": {"id": "numcasts"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Class"], "extent": [31380, 31387], "body": [{"type": "para", "indent": 4, "text": ["In a ", {"type": "q", "text": ["cast"]}, " multiparm instance, the level (vertex, point, primitive, or detail) of the attribute(s) you want to convert to lower precision to save space."], "extent": [31403, 31562]}], "container": true, "attrs": {"id": "class"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attributes"], "extent": [31562, 31574], "body": [{"type": "para", "indent": 4, "text": ["In a ", {"type": "q", "text": ["cast"]}, " multiparm instance, a space-separated list of attributes at the given level (set by the ", {"type": "ui", "text": ["Class"]}, " parameter above) you want to convert to lower precision to save space."], "extent": [31592, 31778]}], "container": true, "attrs": {"id": "attribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Precision"], "extent": [31778, 31789], "body": [{"type": "para", "indent": 4, "text": ["In a ", {"type": "q", "text": ["cast"]}, " multiparm instance, the precision to convert the matching attributes down to, to save space."], "extent": [31809, 31919]}], "container": true, "attrs": {"id": "precision"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Create Load Attributes"], "extent": [31919, 31950], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["File Name Attribute"], "extent": [31950, 31976], "body": [{"type": "para", "indent": 8, "text": ["Writes the name of the file into to given primitive attribute on loading."], "extent": [32004, 32087]}], "container": true, "attrs": {"id": "filenameattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["File Path Attribute"], "extent": [32087, 32112], "body": [{"type": "para", "indent": 8, "text": ["Writes the path of the file into to given primitive attribute on loading."], "extent": [32140, 32223]}], "container": true, "attrs": {"id": "filepathattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["File Index Attribute"], "extent": [32223, 32249], "body": [{"type": "para", "indent": 8, "text": ["Writes the wedge index of the file into to given primitive attribute on loading."], "extent": [32278, 32368]}], "container": true, "attrs": {"id": "fileindexattrib"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Advanced"], "extent": [32368, 32383], "body": [{"level": 3, "type": "sep", "indent": 0, "text": [" Save "], "extent": [32383, 32397]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable Load from Disk on Save"], "extent": [32397, 32429], "body": [{"type": "para", "indent": 4, "text": ["Whether the node will automatically turn on ", {"type": "ui", "text": ["Load from disk"]}, " when you click ", {"type": "ui", "text": ["Save to disk"]}, " or ", {"type": "ui", "text": ["Save to disk in background"]}, "."], "extent": [32458, 32593]}], "container": true, "attrs": {"id": "loadfromdiskonsave"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Harden Base Name on Save"], "extent": [32593, 32619], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["File Path"]}, " is ", {"type": "ui", "text": ["Constructed"]}, " and this is on, when you click ", {"type": "ui", "text": ["Save to disk"]}, " or ", {"type": "ui", "text": ["Save to disk in background"]}, " the node automatically converts the expression in ", {"type": "ui", "text": ["Base name"]}, " to a literal string. This prevents the cache from breaking if you duplicate or rename the scene file or node."], "extent": [32644, 32943]}], "container": true, "attrs": {"id": "hardenbasename"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Intermediate Directories"], "extent": [32943, 32976], "body": [{"type": "para", "indent": 4, "text": ["When writing out cache files, automatically create any intermediate directories in the file path that don\u2019t exist."], "extent": [32993, 33113]}], "container": true, "attrs": {"id": "mkpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Initialize Simulation OPs"], "extent": [1690, 1717], "body": [{"type": "para", "indent": 4, "text": ["Forces all simulation OPs to be reset. This includes DOP\n    Networks, POP SOPs, and other OPs that cache their results."], "extent": [1734, 1860]}, {"type": "para", "indent": 4, "text": ["This is the safest way to render out a simulation, because it\n    starts the simulation from scratch and discards any partial\n    simulations you might have done with different parameters."], "extent": [1860, 2054]}], "container": true, "attrs": {"id": "initsim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Alfred Style Progress"], "extent": [2054, 2077], "body": [{"type": "para", "indent": 4, "text": ["A percentage complete value is printed out as files are\n    written. This is in the style expected by Pixar\u2019s Alfred\n    render queue."], "extent": [2098, 2238]}], "container": true, "attrs": {"id": "alfprogress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save in Background"], "extent": [3202, 3222], "body": [{"type": "para", "indent": 4, "text": ["When saving more than one frame, save in a background thread. This can\n    make saving faster for large file sizes, but may use more memory since it\n    will retain the output geometry until the save completes."], "extent": [3246, 3462]}], "container": true, "attrs": {"id": "savebackground"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save Retries"], "extent": [2592, 2606], "body": [{"type": "para", "indent": 4, "text": ["If saving the geometry to disk fails due to a disk writing error,\n    Houdini will usually error the output node immediately.  This\n    is desirable for most cases where a failure to save means an\n    illegal path, which is not recoverable.  However, sometimes files\n    fail to save due to network issues.  If the number of save retries\n    is non-zero, Houdini will re-attempt to save this number of times.\n    Each time will be accompanied with an output to the console of the\n    failure to save and a five second wait in the hopes that the network will\n    clear up."], "extent": [2625, 3202]}], "container": true, "attrs": {"id": "saveretry"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render with Take"], "extent": [1111, 1129], "body": [{"type": "para", "indent": 4, "text": ["Uses the settings in a particular take while rendering. Choose\n    ", {"type": "ui", "text": ["Current"]}, " to use the current take when rendering."], "extent": [1144, 1268]}], "container": true, "attrs": {"id": "take"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Load "], "extent": [33319, 33332]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Missing Frame"], "extent": [33332, 33348], "body": [{"type": "para", "indent": 4, "text": ["This is what the node should do (in ", {"type": "ui", "text": ["Load from disk"]}, " mode) when the node can\u2019t find (or cleanly load) a cache file. ", {"type": "ui", "text": ["Report error"]}, " sets an error on the node, preventing the rest of the network from cooking. This makes it obvious when a problem happens. ", {"type": "ui", "text": ["No geometry"]}, " (the default) sets a warning on the node rather than an error, and outputs empty geometry. This can be useful if your network has a way of dealing with missing cache frames, or if they're not important. "], "extent": [33371, 33853]}], "container": true, "attrs": {"id": "missingframe"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "file#cachesize", "type": "include", "indent": 0, "role": "item", "extent": [33853, 33879]}, {"ext": "file#prefetch", "type": "include", "indent": 0, "role": "item", "extent": [33879, 33904]}], "container": true, "role": "item_group"}, {"level": 3, "id": "scripts_tab", "container": true, "type": "h", "indent": 0, "text": ["Scripts"], "extent": [7038, 7066], "body": [{"type": "para", "indent": 4, "text": ["A script command can be specified for execution at various execution\n    points. The expression language selected for the script parameter determines\n    whether the command is in hscript or python."], "extent": [7066, 7271]}, {"type": "para", "indent": 4, "text": ["Prior to execution, this node is automatically set as the global current\n    node."], "extent": [7271, 7359]}, {"type": "para", "indent": 4, "text": ["To run statements from a file, specify the path to the file with\n    either a ", {"type": "code", "text": [".cmd"]}, " extension (when the language is set to ", {"type": "ui", "text": ["Hscript"]}, ") or a ", {"type": "code", "text": [".py"]}, "\n    extension (when the language is set to ", {"type": "ui", "text": ["Python"]}, "). Additional arguments to the\n    script can also be supplied. They will be parsed in a shell-like manner."], "extent": [7359, 7673]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Pre-Render Script"], "extent": [7673, 7696], "body": [{"type": "para", "indent": 8, "text": ["Run this script before any rendering."], "extent": [7696, 7743]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Pre-Frame Script"], "extent": [7743, 7765], "body": [{"type": "para", "indent": 8, "text": ["Run this script before each frame."], "extent": [7765, 7809]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Post-Frame Script"], "extent": [7809, 7832], "body": [{"type": "para", "indent": 8, "text": ["Run this script after each frame."], "extent": [7832, 7875]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Post-Render Script"], "extent": [7875, 7899], "body": [{"type": "para", "indent": 8, "text": ["Run this script after all rendering."], "extent": [7899, 7945]}], "container": true, "role": "item"}], "container": true}]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Post-Write Script"], "extent": [3494, 3513], "body": [{"type": "para", "indent": 4, "text": ["Run this HScript after each frame\u2019s data has finished\n    writing to disk.  This is always after the corresponding Post-Frame\n    Script and always before the Post-Render script, but the order\n    otherwise is undefined.  When Save in Background is enabled\n    this allows delaying script actions until the file has finished\n    saving."], "extent": [3532, 3874]}], "container": true, "attrs": {"id": "postwrite"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Scripts "], "extent": [33988, 34004]}, {"type": "para", "indent": 0, "text": ["This section duplicates the pre/post scripts available on the ", {"scheme": "Node", "value": "/nodes/out/geometry", "type": "link", "text": ["Geometry render node"], "fullpath": "/nodes/out/geometry.html"}, "."], "extent": [34004, 34110]}, {"level": 3, "type": "sep", "indent": 0, "text": [" Node Generation "], "extent": [34110, 34134]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Render Geometry In"], "extent": [34134, 34155], "body": [{"type": "para", "indent": 4, "text": ["Creates a ", {"scheme": "Node", "value": "/nodes/obj/labs::rendergeo::1.0", "type": "link", "text": ["Labs Render Geometry"], "exists": true}, " inside this path, when the ", {"scheme": "Icon", "value": "NETWORKS/sop", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/sop.html"}, " icon is clicking on the top right corner of this node."], "extent": [34178, 34348]}], "container": true, "attrs": {"id": "rendergeopath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Top File Cache In"], "extent": [34348, 34367], "body": [{"type": "para", "indent": 4, "text": ["Creates a ", {"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}, " inside this path, when the ", {"scheme": "Icon", "value": "NETWORKS/top", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/top.html"}, " icon is clicking on the top right corner of this node."], "extent": [34393, 34565]}], "container": true, "attrs": {"id": "topfilecachepath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Top Mantra In"], "extent": [34565, 34580], "body": [{"type": "para", "indent": 4, "text": ["Currently not supported."], "extent": [34603, 34633]}], "container": true, "attrs": {"id": "topmantrapath"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Performance Logging "], "extent": [34633, 34661], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Enable Performance Monitor Logging"], "extent": [34661, 34702], "body": [{"type": "para", "indent": 8, "text": ["Saves a performance file along with the cache to investigate the cooking performance. Currently this is a work in progress feature."], "extent": [34729, 34870]}], "container": true, "attrs": {"id": "enableperfmon"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Open Current Profile"], "extent": [34870, 34896], "body": [{"type": "para", "indent": 8, "text": ["Saves a performance file along with the cache to investigate the cooking performance. Currently this is a work in progress feature."], "extent": [34922, 35063]}], "container": true, "attrs": {"id": "openperffile"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Path Construction "], "extent": [35063, 35089]}, {"type": "para", "indent": 0, "text": ["The expressions in these parameters allow an expert user to customize exactly how the node generates a cache file path. However, editing the expressions can easily break the operation of the node. The basic parameters include a lot of room for customization, so we recommend that you ", {"type": "strong", "text": ["do not try to customize these expressions"]}, ". However, they are available if, for example, they are necessary to conform with studio-wide conventions."], "extent": [35089, 35525]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Frame"], "extent": [35525, 35532], "body": [{"type": "para", "indent": 4, "text": ["Contains the expression that computes the current frame number to cache. ", {"type": "strong", "text": ["Do not edit this expression"]}, "."], "extent": [35548, 35657]}], "container": true, "attrs": {"id": "frame"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frame String"], "extent": [35657, 35671], "body": [{"type": "para", "indent": 4, "text": ["Contains the expression that generates the frame number as a padded string, including a dot prefix. ", {"type": "strong", "text": ["Do not edit this expression"]}, "."], "extent": [35690, 35826]}], "container": true, "attrs": {"id": "framestr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Version String"], "extent": [35826, 35842], "body": [{"type": "para", "indent": 4, "text": ["Contains an expression that generates the ", {"type": "q", "text": ["version"]}, " part of the path, including a ", {"type": "code", "text": ["v"]}, " prefix. ", {"type": "strong", "text": ["Do not edit this expression"]}, "."], "extent": [35863, 35993]}], "container": true, "attrs": {"id": "versionstr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cache Folder"], "extent": [35993, 36007], "body": [{"type": "para", "indent": 4, "text": ["Contains an expression that generates the parent directory path for cache files. ", {"type": "strong", "text": ["Do not edit this expression"]}, "."], "extent": [36026, 36143]}], "container": true, "attrs": {"id": "cachedir"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cache Name"], "extent": [36143, 36155], "body": [{"type": "para", "indent": 4, "text": ["Contains an expression that generates the filename for cache files. ", {"type": "strong", "text": ["Do not edit this expression"]}, "."], "extent": [36175, 36279]}], "container": true, "attrs": {"id": "cachename"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Descriptive Label"], "extent": [36279, 36298], "body": [{"type": "para", "indent": 4, "text": ["Contains an expression that generates the ", {"type": "em", "text": ["descriptive text"]}, " displayed next to this node (below the name and badges) in the network editor. This is set to output the cache filename pattern. ", {"type": "strong", "text": ["Do not edit this expression"]}, "."], "extent": [36325, 36551]}], "container": true, "attrs": {"id": "descriptivelabel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File"], "extent": [36551, 36564], "body": [{"type": "para", "indent": 4, "text": ["Contains an expression that generates the resolved, full path of the cache file for the current frame. ", {"type": "strong", "text": ["Do not edit this expression"]}, "."], "extent": [36584, 36724]}], "container": true, "attrs": {"id": "sopoutput"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [36724, 36733], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/labs::filecache::2.0", "type": "link", "text": ["Labs File Cache "], "exists": true}], "extent": [36733, 36785]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/labs::karam::2.0", "type": "link", "text": ["Labs Karma "], "exists": true}], "extent": [36785, 36827]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/labs::wedge::1.0", "type": "link", "text": ["Labs Wedge node"], "exists": true}], "extent": [36827, 36873]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/obj/labs::rendergeo::1.0", "type": "link", "text": ["Labs Render Geometry"], "exists": true}], "extent": [36873, 36928]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/labs::topfilecache::2.0", "type": "link", "text": ["TOP Labs File Cache"], "exists": true}], "extent": [36928, 36987]}], "container": true}], "text": "Related"}], "title": ["File Cache"], "summary": ["Caches (writes out once and then reads from) geometry (possibly animated) to disk."], "included": ["/nodes/out/geometry", "/nodes/out/standard", "/nodes/top/processor_common", "/nodes/top/ropfetch"]}