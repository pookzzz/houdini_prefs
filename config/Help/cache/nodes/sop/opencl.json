{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "opencl", "icon": "COMMON/opencl", "since": "16.0", "verb_since": "16.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["OpenCL"], "extent": [106, 117]}, {"type": "summary", "indent": 0, "text": ["Executes an OpenCL kernel on geometry."], "extent": [117, 164]}, {"type": "para", "indent": 0, "text": ["The OpenCL SOP provides a general interface to create and run OpenCL\nkernels on geometry.  It allows binding of constants, attributes,\nand volume data to OpenCL parameters in the kernel."], "extent": [164, 352]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [352, 361], "body": [{"type": "para", "indent": 4, "text": ["This node requires that you understand OpenCL.\n    It is very easy to write incorrect code using this node."], "extent": [361, 474]}], "container": true}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Syntax"], "extent": [474, 487], "body": [{"type": "para", "indent": 0, "text": ["See ", {"scheme": null, "value": "/vex/ocl", "type": "link", "text": ["OpenCL for VEX users"], "fullpath": "/vex/ocl.html"}, " for basic information on the syntax available."], "extent": [487, 572]}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [572, 584], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Kernel"], "extent": [584, 598], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Kernel Name"], "extent": [598, 612], "body": [{"type": "para", "indent": 4, "text": ["The name of the OpenCL kernel to execute with the loaded program."], "extent": [633, 704]}], "container": true, "attrs": {"id": "kernelname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Code Snippet"], "extent": [704, 722], "body": [{"type": "para", "indent": 4, "text": ["Use the code provided in the Kernel Code parameter rather than an external disk file.  This makes for quicker editing and creation of OpenCL SOPs."], "extent": [739, 892]}], "container": true, "attrs": {"id": "usecode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Kernel File"], "extent": [892, 905], "body": [{"type": "para", "indent": 4, "text": ["The path to OpenCL program file to compile. This can include a path to an on disk file or asset."], "extent": [925, 1028]}], "container": true, "attrs": {"id": "kernelfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Kernel Code"], "extent": [1028, 1041], "body": [{"type": "para", "indent": 4, "text": ["The OpenCL kernel to execute when in Code Snippet mode."], "extent": [1062, 1123]}], "container": true, "attrs": {"id": "kernelcode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Enable @-Binding"], "extent": [1123, 1141], "body": [{"type": "para", "indent": 4, "text": ["In the Code Snippet mode enable the use of @-prefixed macros that\n    will provide a simpler way to generate kernels and manipulate\n    geometry in kernels."], "extent": [1161, 1324]}], "container": true, "attrs": {"id": "atbinding"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Kernel Options"], "extent": [1324, 1340], "body": [{"type": "para", "indent": 4, "text": ["Specify any desired compile flags for the kernel.   The most common\n    is to use -D to provide #define directives for the pre-processor."], "extent": [1364, 1507]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [1507, 1517], "body": [{"type": "para", "indent": 8, "text": ["The Apple OSX OpenCL compiler requires only a single space between kernel options!\n        Houdini defines additional flags while compiling kernels depending on the\n        OpenCL device.  The flags ", {"type": "code", "text": ["H_GPU"]}, " or ", {"type": "code", "text": ["H_CPU"]}, " distinguish between GPU and\n        CPU devices, and ", {"type": "code", "text": ["H_NVIDIA"]}, ", ", {"type": "code", "text": ["H_AMD"]}, ", ", {"type": "code", "text": ["H_INTEL"]}, ", or ", {"type": "code", "text": ["H_APPLE"]}, "\n        signify the hardware vendor.  You can set the environment variable\n        ", {"type": "code", "text": ["HOUDINI_OCL_REPORT_BUILD_LOGS"]}, " to 1 before running Houdini to get a\n        dump of all kernels compiled along with their preprocessor flags."], "extent": [1517, 2068]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "kerneloptions"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Option Attribute"], "extent": [2068, 2086], "body": [{"type": "para", "indent": 4, "text": ["Specify a detail string attribute to be added as a compile flag to the\n    kernel.  This will take the detail attribute in the input geometry\n    of this name. If it is a string, it will be injected as a kernel\n    options.   The string should have the -D options if specifying\n    a define, for example."], "extent": [2115, 2425]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [2425, 2435], "body": [{"type": "para", "indent": 8, "text": ["The value of the string should not change frequently or the\n        kernel may keep recompiling, which can be very expensive."], "extent": [2435, 2570]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "kerneloptionattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Write Back Kernel"], "extent": [2570, 2593], "body": [{"type": "para", "indent": 4, "text": ["After the kernel is executed, a second kernel may be immediately\n    executed with the same set of parameters bound to it.  You can avoid\n    race conditions where multiple threads want to write to the same data\n    by breaking it into a two-pass operation."], "extent": [2622, 2886]}], "container": true, "attrs": {"id": "usewritebackkernel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Write Back Kernel Name"], "extent": [2886, 2910], "body": [{"type": "para", "indent": 4, "text": ["The name of the kernel to use in the write back operation.  It\n    will have the same function signature as the main operation."], "extent": [2940, 3075]}], "container": true, "attrs": {"id": "writebackkernelname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Recompile Kernel"], "extent": [3075, 3093], "body": [{"type": "para", "indent": 4, "text": ["When loading kernels from disk the kernel is cached to avoid\n    regenerating it every solve.  Turning this on forces the re-loading\n    and recompiling of the kernel.  This is useful if #include files\n    refer to code that has changed, or the kernel file is changed\n    in an external text editor."], "extent": [3112, 3417]}, {"type": "para", "indent": 4, "text": ["It should always be disabled when prototyping is complete."], "extent": [3417, 3481]}], "container": true, "attrs": {"id": "recompile"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Options"], "extent": [3481, 3495], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Run Over"], "extent": [3495, 3506], "body": [{"type": "para", "indent": 4, "text": ["The provided OpenCL kernel is invoked once.  The number of global ids,\n    however, is controlled by this setting.  First Writeable attribute\n    sets it to the size of the first bound attribute that is marked writeable.\n    First Writeable Volume likewise sets it to the total voxels of the\n    first bound volume that is marked writeable."], "extent": [3524, 3870]}, {"type": "para", "indent": 4, "text": ["In workset mode, detail integer array attributes are used to determine\n    the number of worksets and the sizes of them."], "extent": [3870, 3996]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [3996, 4006], "body": [{"type": "para", "indent": 8, "text": ["The global ids will be rounded up to ensure efficient processing on the GPU, so you should always compare the ", {"type": "code", "text": ["get_global_id(0)"]}, " with the actual length of the bound attribute."], "extent": [4006, 4191]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "runover"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Iterations"], "extent": [4191, 4203], "body": [{"type": "para", "indent": 4, "text": ["The kernel can be re-executed a variable number of times.  This avoids\n    having to use more nodes to create a for loop, and ensures all data\n    remains on the video card during the successive evaluations."], "extent": [4224, 4437]}], "container": true, "attrs": {"id": "iterations"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Iteration"], "extent": [4437, 4456], "body": [{"type": "para", "indent": 4, "text": ["Include the current iteration as a parameter, available with the\n    ", {"type": "code", "text": ["@Iteration"]}, " binding."], "extent": [4475, 4571]}], "container": true, "attrs": {"id": "iteration"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Worksets Begin Attr."], "extent": [4571, 4593], "body": [{"type": "para", "indent": 4, "text": ["Detail integer array attribute specifying the start value of each\n    workset."], "extent": [4617, 4701]}], "container": true, "attrs": {"id": "worksets_begin"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Worksets Length Attr."], "extent": [4701, 4724], "body": [{"type": "para", "indent": 4, "text": ["Detail integer array attribute specifying the length of each workset.\n    The kernel will be invoked for each of these sizes.  Zero sizes\n    will be skipped."], "extent": [4749, 4913]}], "container": true, "attrs": {"id": "worksets_length"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Single Workgroup if Possible"], "extent": [4913, 4947], "body": [{"type": "para", "indent": 4, "text": ["When running over Worksets on a GPU, it can be faster to execute many\n    small worksets on the GPU within one kernel call, performing synchronization\n    within the kernel after each workset, rather than executing a kernel for each\n    separate workset. When this option is enabled, if the largest workset will fit\n    within one workgroup on the OpenCL GPU device, the ", {"type": "code", "text": ["SINGLE_WORKGROUP"]}, " preprocessor\n    flag will be defined, and the entire ", {"type": "ui", "text": ["Worksets Begin"]}, " and ", {"type": "ui", "text": ["Worksets Length"]}, "\n    arrays will be passed to the kernel.  It is up to the kernel to synchronize\n    at the end of each workset, usually using ", {"type": "code", "text": ["barrier(CLK_MEM_GLOBAL_FENCE)"]}, ".  The\n    code generated by the ", {"type": "ui", "text": ["Generate Kernel"]}, " button shows one way of handling\n    this synchronization."], "extent": [4947, 5708]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Finish Kernels"], "extent": [5708, 5724], "body": [{"type": "para", "indent": 4, "text": ["When Finish Kernels is disabled, no attempt is to wait for the\n    OpenCL kernels to complete before continuing the next solver.\n    This lets them run in the background until their results\n    are actually needed.  To simplify debugging, it is useful\n    to ensure kernels are finished to make sure errors are detected\n    in the right spot."], "extent": [5741, 6090]}], "container": true, "attrs": {"id": "finish"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Time"], "extent": [6090, 6104], "body": [{"type": "para", "indent": 4, "text": ["Include the current time as a parameter."], "extent": [6119, 6165]}], "container": true, "attrs": {"id": "time"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Timestep"], "extent": [6165, 6183], "body": [{"type": "para", "indent": 4, "text": ["Include the current timestep as a parameter."], "extent": [6200, 6250]}], "container": true, "attrs": {"id": "timeinc"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Scale"], "extent": [6250, 6262], "body": [{"type": "para", "indent": 4, "text": ["A constant multiplier on the timestep."], "extent": [6282, 6327]}], "container": true, "attrs": {"id": "timescale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Method"], "extent": [6327, 6340], "body": [{"type": "para", "indent": 4, "text": ["For some operations you may wish to know the power of the timestep.\n    Rather than recomputing in the kernel, you can set this to ", {"type": "code", "text": ["e^Timestep"]}, "\n    and have the exponentiation pre-computed."], "extent": [6361, 6556]}], "container": true, "attrs": {"id": "timemethod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Simplex Noise Data"], "extent": [6556, 6584], "body": [{"type": "para", "indent": 4, "text": ["Include an opaque pointer that can be passed to the simplex noise\n    functions in <xnoise.h> to generate simplex noise and curl noise from\n    OpenCL kernels."], "extent": [6600, 6765]}], "container": true, "attrs": {"id": "xnoise"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Precision"], "extent": [6765, 6776], "body": [{"type": "para", "indent": 4, "text": ["Controls the precision of this node.  The ", {"type": "code", "text": ["fpreal"]}, " and ", {"type": "code", "text": ["exint"]}, "\n    types will be defined in the generated code to correspond with\n    this specified precision.  The vector variants will also be defined,\n    ie, ", {"type": "code", "text": ["fpreal3"]}, ", ", {"type": "code", "text": ["fpreal4"]}, ", etc.  Additionally the ", {"type": "code", "text": ["FPREAL_PREC"]}, " symbol\n    is defined as 16 for half, 32 for float, or 64 for double."], "extent": [6796, 7141]}, {"type": "para", "indent": 4, "text": ["Auto will use the preferred precision of the incoming geometry,\n    as set by the ", {"scheme": "Node", "value": "/nodes/sop/attribcast", "type": "link", "text": ["Attribute Cast SOP"], "fullpath": "/nodes/sop/attribcast.html"}, "."], "extent": [7141, 7270]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [7270, 7280], "body": [{"type": "para", "indent": 8, "text": ["16-bit cannot be used for computation in most drivers."], "extent": [7280, 7345]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "precision"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Bindings"], "extent": [7345, 7360], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["OpenCL Parameters"], "extent": [7360, 7387], "body": [{"type": "para", "indent": 0, "text": ["Each parameter can either be a fixed constant value, evaluated\nbefore kernel invocation, or read/write from a volume or\ngeometry attribute."], "extent": [7387, 7529]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Parameter Name"], "extent": [7529, 7545], "body": [{"type": "para", "indent": 4, "text": ["The name of the parameter.  This is used in the ", {"type": "code", "text": ["Generate Kernel"]}, "\n    button, but is otherwise only present as a comment.  The actual\n    binding to an OpenCL kernel is done by parameter order, not\n    by the name."], "extent": [7570, 7790]}], "container": true, "attrs": {"id": "bindings#_name"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Options"], "extent": [7790, 7806], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Parameter Type"], "extent": [7806, 7823], "body": [{"type": "para", "indent": 4, "text": ["The type of parameter to create and bind."], "extent": [7848, 7895]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Integer"], "extent": [7895, 7908], "body": [{"type": "para", "indent": 8, "text": ["A constant integer value, allowing you to bind channel references and expressions that are pre-computed."], "extent": [7908, 8022]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Float"], "extent": [8022, 8033], "body": [{"type": "para", "indent": 8, "text": ["A constant float value.  Optionally you can scale it by the timestep."], "extent": [8033, 8112]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Float Vec4"], "extent": [8112, 8128], "body": [{"type": "para", "indent": 8, "text": ["A constant tuple of four floats, binding to a ", {"type": "code", "text": ["float4"]}, " OpenCL parameter."], "extent": [8128, 8210]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Ramp"], "extent": [8210, 8220], "body": [{"type": "para", "indent": 8, "text": ["A scalar ramp.  Because evaluating a spline-based ramp inside of an OpenCL kernel is complex, the ramp is instead sampled into a uniform\n        array of floats.  The ", {"type": "ui", "text": ["Ramp Size"]}, " parameter controls the number of samples used."], "extent": [8220, 8457]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Attribute"], "extent": [8457, 8472], "body": [{"type": "para", "indent": 8, "text": ["Bind a geometry attribute."], "extent": [8472, 8508]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Volume"], "extent": [8508, 8520], "body": [{"type": "para", "indent": 8, "text": ["Bind a volume."], "extent": [8520, 8543]}], "container": true}, {"type": "dt", "indent": 4, "text": ["VDB"], "extent": [8543, 8552], "body": [{"type": "para", "indent": 8, "text": ["Bind a VDB."], "extent": [8552, 8574]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "bindings#_type"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Integer"], "extent": [8574, 8583], "body": [{"type": "para", "indent": 4, "text": ["Integer value to use integer mode."], "extent": [8610, 8651]}], "container": true, "attrs": {"id": "bindings#_intval"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Float"], "extent": [8651, 8658], "body": [{"type": "para", "indent": 4, "text": ["Float value to use float mode."], "extent": [8683, 8719]}], "container": true, "attrs": {"id": "bindings#_fval"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Float 4"], "extent": [8719, 8728], "body": [{"type": "para", "indent": 4, "text": ["Float 4 value to use float 4 mode."], "extent": [8754, 8795]}], "container": true, "attrs": {"id": "bindings#_v4val"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Scale"], "extent": [8795, 8807], "body": [{"type": "para", "indent": 4, "text": ["How to scale the provided float value by the timestep.  Because timeinc\n    may not be known at time of parameter evaluation, it can be computed\n    as a constant prior to evaluating the kernel and applied\n    to the float value."], "extent": [8837, 9072]}], "container": true, "attrs": {"id": "bindings#_timescale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ramp"], "extent": [9072, 9078], "body": [{"type": "para", "indent": 4, "text": ["The ramp data to provide as a list of float values."], "extent": [9103, 9160]}], "container": true, "attrs": {"id": "bindings#_ramp"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ramp Size"], "extent": [9160, 9171], "body": [{"type": "para", "indent": 4, "text": ["The number of floating point values to evaluate the ramp in."], "extent": [9200, 9266]}], "container": true, "attrs": {"id": "bindings#_rampsize"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Volume"], "extent": [9266, 9274], "body": [{"type": "para", "indent": 4, "text": ["The name or number of the volume or VDB primitive to bind."], "extent": [9301, 9366]}], "container": true, "attrs": {"id": "bindings#_volume"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Force Alignment"], "extent": [9366, 9383], "body": [{"type": "para", "indent": 4, "text": ["To simplify kernels one may often assume all volumes are aligned\n    in resolution and transform.  If Force Alignment is set, this is\n    enforced and volumes that are misaligned generate errors."], "extent": [9414, 9616]}], "container": true, "attrs": {"id": "bindings#_forcealign"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Voxel Resolution"], "extent": [9616, 9634], "body": [{"type": "para", "indent": 4, "text": ["Add the resolution of the volume as a parameter."], "extent": [9665, 9720]}], "container": true, "attrs": {"id": "bindings#_resolution"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Voxel Size"], "extent": [9720, 9732], "body": [{"type": "para", "indent": 4, "text": ["Add the size of the volume as a parameter, in SOP space."], "extent": [9762, 9825]}], "container": true, "attrs": {"id": "bindings#_voxelsize"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Volume Transform to World"], "extent": [9825, 9852], "body": [{"type": "para", "indent": 4, "text": ["Add a matrix transform that converts from the volume\u2019s voxel coordinates\n    to the SOP coordinates."], "extent": [9885, 9992]}], "container": true, "attrs": {"id": "bindings#_xformtoworld"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Volume Transform to Voxel"], "extent": [9992, 10019], "body": [{"type": "para", "indent": 4, "text": ["Add a matrix transform that converts from SOP coordinates to the volume\u2019s voxel coordinates."], "extent": [10052, 10150]}], "container": true, "attrs": {"id": "bindings#_xformtovoxel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute"], "extent": [10150, 10161], "body": [{"type": "para", "indent": 4, "text": ["Which attribute to bind.  It is an error if it is missing, unless the optional flag is set."], "extent": [10191, 10288]}, {"type": "para", "indent": 4, "text": ["Present for Attributes."], "extent": [10288, 10317]}], "container": true, "attrs": {"id": "bindings#_attribute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Class"], "extent": [10317, 10324], "body": [{"type": "para", "indent": 4, "text": ["The type of the attribute.  Since the first writeable attribute can determine the iteration order, this can determine the number of global\n    ids processed by the OpenCL solver."], "extent": [10356, 10540]}, {"type": "para", "indent": 4, "text": ["Not all bound attributes need to be the same type, or even come from the same geometry data."], "extent": [10540, 10638]}, {"type": "para", "indent": 4, "text": ["Present for Attributes."], "extent": [10638, 10667]}], "container": true, "attrs": {"id": "bindings#_attribclass"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Type"], "extent": [10667, 10673], "body": [{"type": "para", "indent": 4, "text": ["What sort of attribute to bind.  Float and integer attributes are bound as single arrays containing all element values in order.  Tuples are\n    interleaved, ie, ", {"type": "code", "text": ["P"]}, " will be bound as ", {"type": "code", "text": ["xyzxyzxyz"]}, "."], "extent": [10704, 10905]}, {"type": "para", "indent": 4, "text": ["Array attributes are bound as two arrays.  One array contains the offsets of each element\u2019s array data.  Thus, the difference of\n    a pair of offsets provides the elements array length.  The second array is the data of all elements' arrays concatenated into a single\n    array."], "extent": [10905, 11189]}, {"type": "para", "indent": 4, "text": ["Present for Attributes."], "extent": [11189, 11218]}], "container": true, "attrs": {"id": "bindings#_attribtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Size"], "extent": [11218, 11224], "body": [{"type": "para", "indent": 4, "text": ["Tuple size of the attribute to bind.  If greater than zero, the attribute must be able to provide this tuple size.  If zero, it will bind\n    automatically and an extra parameter will be generated storing the tuplesize."], "extent": [11255, 11480]}, {"type": "para", "indent": 4, "text": ["Present for Attributes."], "extent": [11480, 11509]}], "container": true, "attrs": {"id": "bindings#_attribsize"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Precision"], "extent": [11509, 11520], "body": [{"type": "para", "indent": 4, "text": ["Controls the precision the data of this parameter is bound with.\n    The node option will use the node\u2019s precision, so will vary depending\n    on its setting and the corresponding kernel code should use the\n    ", {"type": "code", "text": ["fpreal"]}, " or ", {"type": "code", "text": ["exint"]}, " defines."], "extent": [11550, 11795]}, {"type": "para", "indent": 4, "text": ["This is the precision the data is stored on the video card so using\n    lower precision can save GPU memory.  But note that 16-bit, which\n    corresponds to ", {"type": "code", "text": ["half"]}, ", often cannot be used for computation.  The\n    ", {"type": "code", "text": ["vload_half"]}, " can be used to promote it to ", {"type": "code", "text": ["float"]}, " for computation."], "extent": [11795, 12079]}, {"type": "para", "indent": 4, "text": ["If the same attribute ends up bound with different precisions it\n    will fail the binding."], "extent": [12079, 12176]}, {"type": "para", "indent": 4, "text": ["Currently volumes only bind with 32bit data precision."], "extent": [12176, 12236]}], "container": true, "attrs": {"id": "bindings#_precision"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Readable"], "extent": [12236, 12246], "body": [{"type": "para", "indent": 4, "text": ["Determines if the OpenCL kernel will read from this attribute or volume. If not set, the attributes values will not be copied onto the GPU.\n    This is useful for write-only attributes as it avoids an unnecessary copy, but requires care as uninitialized data will be present."], "extent": [12275, 12556]}], "container": true, "attrs": {"id": "bindings#_readable"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Writeable"], "extent": [12556, 12567], "body": [{"type": "para", "indent": 4, "text": ["Determines if the OpenCL kernel will write back to this attribute or volume.  Causes the CPU version of the attribute or volume to be\n    marked out of date so the next time it is needed it will be copied back from the GPU."], "extent": [12597, 12827]}], "container": true, "attrs": {"id": "bindings#_writeable"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Optional"], "extent": [12827, 12837], "body": [{"type": "para", "indent": 4, "text": ["Marks the attribute or volume as not necessary.  If the attribute or volume isn\u2019t present in the geometry, rather than having an error, a ", {"type": "code", "text": ["#define"]}, " is set in the kernel options to disable the attribute.  Note that this also changes the parameter signature, so the ", {"type": "ui", "text": ["Generate Code"]}, " button should be used to verify the syntax."], "extent": [12866, 13197]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [13197, 13207], "body": [{"type": "para", "indent": 8, "text": ["The parameter name is used in the ", {"type": "code", "text": ["#define"]}, ", so changing the parameter name requires changing the code."], "extent": [13207, 13320]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "bindings#_optional"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Default Value"], "extent": [13320, 13335], "body": [{"type": "para", "indent": 4, "text": ["Marks that if an optional attribute or volume is missing that a\n    parameter value should still be bound to the kernel.  A #define is\n    set in the kernel options to disable the attribute and switch to\n    the single value.  Note that this also changes the parameter\n    signature, so the ", {"type": "ui", "text": ["Generate Code"]}, " button should be used\n    to verify the syntax."], "extent": [13362, 13724]}, {"type": "para", "indent": 4, "text": ["The value of the bound parameter will be taken from the integer or\n    float value of this parameter."], "extent": [13724, 13832]}], "container": true, "attrs": {"id": "bindings#_devval"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Generated Code"], "extent": [13832, 13853], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Generate Kernel"], "extent": [13853, 13871], "body": [{"type": "para", "indent": 4, "text": ["When @-Binding is enabled, will produce the fully expanded code\n    that is sent to the actual compiler.   This can resolve line\n    numbers for errors when compilers do not respect the #line\n    directive, and also help understand how the @-macros work.  Note\n    that the exact expansion of @-macros should not be relied upon."], "extent": [13896, 14230]}, {"type": "para", "indent": 4, "text": ["Otherwise, creates a prototype for the required kernel function\n    taking all of your current selected parameters into account.  This\n    can be used as a starting point or to update your interface when\n    new parameters are added or removed."], "extent": [14230, 14480]}], "container": true, "attrs": {"id": "generatekernel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Generated Code"], "extent": [14480, 14496], "body": [{"type": "para", "indent": 4, "text": ["The code snippet with all @-bindings expanded.  "], "extent": [14520, 14574]}, {"type": "para", "indent": 4, "text": ["Note this parameter is not used but is purely informational."], "extent": [14574, 14640]}], "container": true, "attrs": {"id": "generatedcode"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [14640, 14649], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/dop/gasopencl", "type": "link", "text": "", "fullpath": "/nodes/dop/gasopencl.html"}], "extent": [14649, 14673]}], "container": true}], "text": "Related"}], "title": ["OpenCL"], "summary": ["Executes an OpenCL kernel on geometry."]}