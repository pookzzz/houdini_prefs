{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "labs::sop_quadrangulate", "icon": "quadrangulate", "tags": "sidefxlabs,  model, gamedev, cleanup", "version": "", "namespace": "labs"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Labs Quadrangulate"], "extent": [0, 23]}, {"type": "summary", "indent": 0, "text": [" Simple Node to take a triangulated mesh and attempt to collapse the diagonal edges to return the mesh to a quad dominant state "], "extent": [151, 287]}, {"type": "para", "indent": 0, "text": ["The Quadrangulate Node is designed to remove obvious edges from a triangulated mesh in order to return to what the original quaded mesh would've looked like. "], "extent": [287, 447]}, {"type": "para", "indent": 0, "text": ["It works by iterating over all of the edges on a primitive and isolating the longest one. In Fast Mode that\u2019s all it does and it deletes the longest edges. "], "extent": [447, 605]}, {"type": "para", "indent": 0, "text": ["With Fast Mode disabled, it looks for conflicting primitives, where a primitive pair doesn\u2019t agree on what it\u2019s longest edges are. All this means is that we tag each ", {"type": "q", "text": ["long edge"]}, " and for it to be a valid original quad, \nthe long edge should be tagged twice. If it\u2019s tagged only once it could still be a valid quad, but usually it means that the original quad wasn\u2019t perfectly squared and likely skewed. "], "extent": [605, 1009]}, {"type": "para", "indent": 0, "text": ["If the original quads had mostly even length edges, this algorithm works great. If the original quads were somewhat skewed, it is harder to determine if there was a quad there in the first place or if it was a triangle. "], "extent": [1009, 1231]}, {"type": "para", "indent": 0, "text": ["Below you can see the results on the Rubber Toy"], "extent": [1231, 1280]}, {"type": "compare_images_group", "body": [{"ext": null, "type": "compare_images", "indent": 0, "role": "item", "extent": [1280, 1297], "body": [], "container": true, "attrs": {"image1": "/images/quadrangulate_before.png", "image2": "/images/quadrangulate_after.png"}}], "container": true, "role": "item_group"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1389, 1401], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Ignore Edges"], "extent": [1401, 1425], "body": [{"type": "para", "indent": 16, "text": ["Edges that will be left alone and not collapsed. Helpful if you want to protect a certain edge from being deleted"], "extent": [1425, 1572]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Force Remove Edges"], "extent": [1572, 1600], "body": [{"type": "para", "indent": 16, "text": ["Edge that will be forcefully removed. Helpful if there are specific edges that the user wants to remove that the algorithm doesn\u2019t pick up "], "extent": [1600, 1773]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Fast Mode"], "extent": [1773, 1792], "body": [{"type": "para", "indent": 16, "text": ["Fast Mode skips a second pass to resolve quads where the longest edge isn\u2019t agreed upon by 2 neighborhing triangles."], "extent": [1792, 1942]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Ignore Boundary Edges"], "extent": [1942, 1973], "body": [{"type": "para", "indent": 16, "text": ["Protect Boundary Edges from being collapsed"], "extent": [1973, 2050]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Ensure Max Edges"], "extent": [2050, 2076], "body": [{"type": "para", "indent": 16, "text": ["Restrict the number of edges on the final polygons to be equal or less than this value."], "extent": [2076, 2196]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}], "title": ["Labs Quadrangulate"], "summary": [" Simple Node to take a triangulated mesh and attempt to collapse the diagonal edges to return the mesh to a quad dominant state "]}