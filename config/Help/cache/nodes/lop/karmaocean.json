{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "karmaocean", "icon": "LOP/karmaocean", "since": "19.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Karma Ocean"], "extent": [0, 16]}, {"type": "summary", "indent": 0, "text": ["Render an ocean with the Karma CPU renderer."], "extent": [109, 161]}, {"level": 2, "id": "overview", "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [161, 187], "body": [{"type": "para", "indent": 0, "text": ["Render an ocean using the Karma CPU renderer, often created by the ", {"scheme": null, "value": "/shelf/smallocean", "type": "link", "text": ["Small"], "fullpath": "/shelf/smallocean.html"}, " or ", {"scheme": null, "value": "/shelf/largeocean", "type": "link", "text": ["Large"], "fullpath": "/shelf/largeocean.html"}, " Ocean shelf tools."], "extent": [187, 331]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [331, 344], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["On the ", {"type": "ui", "text": ["Oceans"]}, " shelf, click ", {"type": "ui", "text": ["Small Ocean"]}, "."], "extent": [344, 396]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Dive into the ", {"type": "code", "text": ["ocean_geometry"]}, " node. The shelf tool automatically creates a Karma Ocean node."], "extent": [396, 493]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Save the project."], "extent": [493, 514]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Select the  ", {"type": "code", "text": ["save_spectra"]}, " ", {"scheme": "Node", "value": "/nodes/out/geometry", "type": "link", "text": ["Geometry Output node"], "fullpath": "/nodes/out/geometry.html"}, "."], "extent": [514, 586]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Set ", {"type": "ui", "text": ["Valid Frame Range"]}, " to ", {"type": "ui", "text": ["Render Frame Range"]}, " and turn on __Save to Disk (\nin Background)", {"type": "em", "text": []}, " to cache the scene."], "extent": [586, 707]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Do the same with the ", {"scheme": "Node", "value": "/nodes/sop/filecache", "type": "link", "text": ["File Cache"], "fullpath": "/nodes/sop/filecache.html"}, " node named ", {"type": "code", "text": ["bake_foam"]}, "."], "extent": [707, 787]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Connect the File Cache node\u2019s output to the ", {"scheme": "Node", "value": "/nodes/sop/merge", "type": "link", "text": ["Merge"], "fullpath": "/nodes/sop/merge.html"}, " node\u2019s (", {"type": "code", "text": ["merge_foam"]}, ") \ninput. When you move the timeline slider, foam should be visible in the viewer."], "extent": [787, 960]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Switch to the ", {"type": "code", "text": ["/stage"]}, " network and select the Karma Ocean node."], "extent": [960, 1027]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Turn on ", {"type": "ui", "text": ["Foam File"]}, ". The correct path should already be shown."], "extent": [1027, 1095]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["For faster iterations, set ", {"type": "ui", "text": ["Dicing Quality"]}, " to ", {"type": "code", "text": ["0.25"]}, " and turn off ", {"type": "ui", "text": ["Interior Geometry"]}, "."], "extent": [1095, 1190]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Add an ", {"scheme": "Node", "value": "/nodes/lop/domelight", "type": "link", "text": ["Environment"], "fullpath": "/nodes/lop/domelight.html"}, " light node."], "extent": [1190, 1245]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Connect the Karma Ocean node\u2019s output to the light\u2019s input."], "extent": [1245, 1309]}], "container": true}]}, {"level": 2, "id": "tips", "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [1309, 1327], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["When using the ", {"scheme": "Small", "value": "/shelf/smallocean", "type": "link", "text": "", "fullpath": "/shelf/smallocean.html"}, " or ", {"scheme": "Large", "value": "/shelf/largeocean", "type": "link", "text": "", "fullpath": "/shelf/largeocean.html"}, " Ocean shelf tools inside the Solaris ", {"type": "code", "text": ["/stage"]}, " context, the ocean proxy and render geometry will be created within the Karma LOP itself, keeping all components within Solaris."], "extent": [1327, 1576]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["After changing the parameters on the ", {"scheme": "Node", "value": "/nodes/sop/oceanspectrum", "type": "link", "text": ["Ocean Spectrum"], "fullpath": "/nodes/sop/oceanspectrum.html"}, " SOP(s) that generate the ocean spectrum, you will need to re-save the spectra to a file for Karma to pick up the changes. If Karma is currently rendering in the Solaris viewport, you will also need to ", {"type": "ui", "text": ["Restart Render"]}, " from the viewport rendering dropdown menu."], "extent": [1576, 1919]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Set the ", {"type": "ui", "text": ["Dicing Quality"]}, " to 0.25 and disable ", {"type": "ui", "text": ["Interior Geometry"]}, " for faster iterations when rendering oceans for look development."], "extent": [1919, 2057]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The ocean materials make extensive use of VEX and will therefore work with Karma CPU only."], "extent": [2057, 2152]}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [2152, 2164], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Primitive Path"], "extent": [2164, 2181], "body": [{"type": "para", "indent": 4, "text": ["The scene graph path at which to create the ocean prim."], "extent": [2200, 2261]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 0, "type": "title", "indent": 0, "text": ["Spectrum"], "extent": [2261, 2274]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Spectrum File"], "extent": [2274, 2290], "body": [{"type": "para", "indent": 4, "text": ["The location of the ocean spectrum file, containing one or more ocean spectra as created the by the ", {"scheme": "Node", "value": "/nodes/sop/oceanspectrum", "type": "link", "text": ["Ocean Spectrum"], "fullpath": "/nodes/sop/oceanspectrum.html"}, " SOP."], "extent": [2313, 2463]}], "container": true, "attrs": {"id": "spectrumfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Mask File"], "extent": [2463, 2474], "body": [{"type": "para", "indent": 4, "text": ["An optional animated file sequence of mask geometry that can be used to mask the ocean displacement, often created by the ", {"scheme": "Node", "value": "/nodes/sop/particlefluidmask", "type": "link", "text": ["Particle Fluid Mask"], "fullpath": "/nodes/sop/particlefluidmask.html"}, " SOP and set up by the ", {"scheme": null, "value": "/shelf/oceanflattank", "type": "link", "text": ["Ocean Flat Tank"], "fullpath": "/shelf/oceanflattank.html"}, " or ", {"scheme": null, "value": "/shelf/guidedoceanlayer", "type": "link", "text": ["Guided Ocean Layer"], "fullpath": "/shelf/guidedoceanlayer.html"}, " shelf tools."], "extent": [2493, 2791]}], "container": true, "attrs": {"id": "maskfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Foam File"], "extent": [2791, 2802], "body": [{"type": "para", "indent": 4, "text": ["An optional animated file sequence of foam particles that can be used to render foam on the ocean when using the default ocean material.  These particles are usually generated with the ", {"scheme": "Node", "value": "/nodes/sop/oceanfoam", "type": "link", "text": ["Ocean Foam"], "fullpath": "/nodes/sop/oceanfoam.html"}, " SOP."], "extent": [2821, 3048]}], "container": true, "attrs": {"id": "foamfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time"], "extent": [3048, 3054], "body": [{"type": "para", "indent": 4, "text": ["The time at which the ocean surface should be evaluated."], "extent": [3069, 3131]}], "container": true, "attrs": {"id": "time"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 0, "type": "title", "indent": 0, "text": ["Surface"], "extent": [3131, 3143]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Proxy Geometry"], "extent": [3143, 3160], "body": [{"type": "para", "indent": 4, "text": ["The path to the geometry that will get the ", {"type": "code", "text": ["proxy"]}, " purpose in the Solaris viewport, and provides a low-res approximation of the final ocean surface."], "extent": [3179, 3333]}], "container": true, "attrs": {"id": "proxygeo"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Keep Proxy on Output"], "extent": [3333, 3355], "body": [{"type": "para", "indent": 4, "text": ["Controls whether to output the proxy geometry when writing out USD for rendering or use as asset.  The proxy geometry is usually much larger on disk than the render geometry, but can be useful when referencing the ocean USD asset into another context or application."], "extent": [3381, 3653]}], "container": true, "attrs": {"id": "outputproxy"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render Geometry"], "extent": [3653, 3670], "body": [{"type": "para", "indent": 4, "text": ["The path to the geometry that gets the ", {"type": "code", "text": ["render"]}, " purpose in the Solaris viewport, and will be displaced by ", {"type": "ui", "text": ["Surface Material"]}, " to render the ocean surface."], "extent": [3690, 3851]}], "container": true, "attrs": {"id": "rendergeo"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Surface Material"], "extent": [3851, 3869], "body": [{"type": "para", "indent": 4, "text": ["The path to the material to render the ocean surface. By default this parameter is set to an embedded copy of the standard ", {"type": "ui", "text": ["Ocean Surface"]}, " material."], "extent": [3895, 4051]}], "container": true, "attrs": {"id": "surfacematerial"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Dicing Quality"], "extent": [4051, 4067], "body": [{"type": "para", "indent": 4, "text": ["This parameter controls the geometric subdivision resolution for the ocean.  A value of 1 means that approximately 1 micropolygon will be created per pixel.  A higher value will generate smaller micropolygons meaning that more shading will occur - but the quality will be higher."], "extent": [4091, 4376]}], "container": true, "attrs": {"id": "dicingquality"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Wave Height"], "extent": [4376, 4393], "body": [{"type": "para", "indent": 4, "text": ["The maximum height of the waves in the spectrum, used for shading and bounding the amount of displacement.  This should usually match the ", {"type": "ui", "text": ["Amplitude Scale"]}, " of the ", {"scheme": "Node", "value": "/nodes/sop/oceanspectrum", "type": "link", "text": ["Ocean Spectrum"], "fullpath": "/nodes/sop/oceanspectrum.html"}, " SOP with the largest waves."], "extent": [4417, 4655]}], "container": true, "attrs": {"id": "maxwaveheight"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 0, "type": "title", "indent": 0, "text": ["Interior"], "extent": [4655, 4668]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Interior Geometry"], "extent": [4668, 4688], "body": [{"type": "para", "indent": 4, "text": ["The path to the geometry that will be rendered as a uniform volume beneath the ocean surface to emulate absorption within the water.  This volume needs to be displaced like the surface, so can be expensive to render.  It can be temporarily disabled for faster look development rendering within the Solaris viewport."], "extent": [4714, 5035]}], "container": true, "attrs": {"id": "interiorgeo"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Interior Material"], "extent": [5035, 5054], "body": [{"type": "para", "indent": 4, "text": ["The path to the material to render the ocean interior volume. By default this parameter is set to an embedded copy of the standard ", {"type": "ui", "text": ["Ocean Volume"]}, " material."], "extent": [5081, 5244]}], "container": true, "attrs": {"id": "interiormaterial"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Interior Density"], "extent": [5244, 5262], "body": [{"type": "para", "indent": 4, "text": ["The density of the interior uniform volume."], "extent": [5289, 5338]}], "container": true, "attrs": {"id": "Interior Density"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Interior Volume Samples"], "extent": [5338, 5363], "body": [{"type": "para", "indent": 4, "text": ["The number of samples to generate when rendering the interior uniform volume"], "extent": [5390, 5471]}], "container": true, "attrs": {"id": "vm_volumesamples"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}], "title": ["Karma Ocean"], "summary": ["Render an ocean with the Karma CPU renderer."]}