{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "karmaprocedural", "icon": "LOP/karmaprocedural", "tags": "procedurals", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Karma Procedural"], "extent": [0, 21]}, {"type": "summary", "indent": 0, "text": ["Sets up render-time instantiation for Karma."], "extent": [134, 187]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [187, 202], "body": [{"type": "para", "indent": 0, "text": ["This is a reference implementation of how to do render-time instantiation in Karma. This creates a prim with the proper attributes to instruct Karma to replace geometry points with instanced geometry at render time."], "extent": [202, 421]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [421, 434], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["In the network editor, double-click this node to dive into the SOP subnet inside."], "extent": [434, 520]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["In the SOP subnet, build a network that creates points at positions where you want render-time geometry to appear."], "extent": [520, 638], "body": [{"type": "para", "indent": 4, "text": ["You can create named point groups in the SOP geometry if you want to instantiate the same thing on multiple points."], "extent": [638, 759]}], "container": true}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["In the network editor, press ", {"keys": ["U"], "type": "keys", "text": null}, " to go back up to the LOP network."], "extent": [759, 831]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["In the Karma Procedural node\u2019s parameters, set what to instantiate on each point (or group of points)."], "extent": [831, 938]}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [938, 949], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["In VEX snippets, you can use ", {"type": "code", "text": ["@"]}, " variable names containing colons (", {"type": "code", "text": [":"]}, "). This makes it easier to automatically bind certain USD attribute names (for example ", {"type": "code", "text": ["i@primvars:foo"]}, "). (These names are not normally legal in names in VEX source code. The node automatically encodes these kinds of names when used in a snippet.)"], "extent": [16, 336]}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [977, 989], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Primitive Path"], "extent": [989, 1006], "body": [{"type": "para", "indent": 4, "text": ["Create a primitive at this path in the scene graph tree. This creates an ", {"type": "code", "text": ["Xform"]}, " prim with attributes that tell Karma what to do at render time. The ", {"type": "code", "text": ["Xform"]}, " prim contains the generated point geometry as a USD ", {"type": "code", "text": ["Points"]}, " prim."], "extent": [1006, 1235]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Procedurals"], "extent": [1235, 1248], "body": [{"type": "para", "indent": 4, "text": ["This node can create multiple render-time point replacements. Set the number of replacements, or click the plus and minus buttons to add or remove replacements."], "extent": [1248, 1414]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [1414, 1421], "body": [{"type": "para", "indent": 4, "text": ["Specify the points in the generated geometry you want to replace. This can be the name of a point group, or space-separated ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group syntax"], "fullpath": "/model/groups.html"}, ". For example, ", {"type": "code", "text": ["0 1 2 5-7"]}, " to select points by point number."], "extent": [1421, 1639]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Type"], "extent": [1639, 1645], "body": [{"type": "para", "indent": 4, "text": ["What to replace the selected points with at render time."], "extent": [1645, 1707]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Sphere"], "extent": [1707, 1719], "body": [{"type": "para", "indent": 8, "text": ["Replace the points with spheres."], "extent": [1719, 1761]}], "container": true}, {"type": "dt", "indent": 4, "text": ["File"], "extent": [1761, 1771], "body": [{"type": "para", "indent": 8, "text": ["Replace each point with geometry loaded from a file. Karma supports loading all file formats understood by Houdini."], "extent": [1771, 1896]}], "container": true}, {"type": "dt", "indent": 4, "text": ["VDB Iso Surface"], "extent": [1896, 1917], "body": [{"type": "para", "indent": 8, "text": ["Replace each point with a VDB iso-surface loaded from a file."], "extent": [1917, 1988]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Radius"], "extent": [1988, 1996], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Type"]}, " is ", {"type": "q", "text": ["Sphere"]}, ", the radius of the sphere. If the point has ", {"type": "code", "text": ["scale"]}, " or ", {"type": "code", "text": ["pscale"]}, " SOP attributes, those values are multiplied by this. If you turn this off, the default radius is ", {"type": "code", "text": ["1"]}, "."], "extent": [1996, 2193]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use VEXpressions"], "extent": [2193, 2211], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Type"]}, " is ", {"type": "q", "text": ["Sphere"]}, ", set the radius of each sphere using a VEX snippet. Write the radius into the ", {"type": "code", "text": ["radius"]}, " float variable. You can use the variables typically available to an ", {"scheme": "Node", "value": "/nodes/sop/attribwrangle", "type": "link", "text": ["Attribute Wrangle SOP"], "fullpath": "/nodes/sop/attribwrangle.html"}, ". The current point number is available as ", {"type": "code", "text": ["@ptnum"]}, "."], "extent": [2237, 2522]}], "container": true, "attrs": {"id": "useradiussnippet"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Color"], "extent": [2522, 2529], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Type"]}, " is ", {"type": "q", "text": ["Sphere"]}, ", set the ", {"type": "code", "text": ["displayColor"]}, " of each sphere. If the point has a ", {"type": "code", "text": ["Cd"]}, " SOP attribute, that value is multiplied by this. If you turn this off, the default color is ", {"type": "code", "text": ["1.0, 1.0, 1.0"]}, "."], "extent": [2529, 2733]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use VEXpressions"], "extent": [2733, 2751], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Type"]}, " is ", {"type": "q", "text": ["Sphere"]}, ", set the color of each sphere using a VEX snippet. Write the radius into the ", {"type": "code", "text": ["color"]}, " vector variable. You can use the variables typically available to an ", {"scheme": "Node", "value": "/nodes/sop/attribwrangle", "type": "link", "text": ["Attribute Wrangle SOP"], "fullpath": "/nodes/sop/attribwrangle.html"}, ". The current point number is available as ", {"type": "code", "text": ["@ptnum"]}, "."], "extent": [2777, 3061]}], "container": true, "attrs": {"id": "usecolorsnippet"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["File"], "extent": [3061, 3067], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Type"]}, " is ", {"type": "q", "text": ["File"]}, ", the file path to the geometry file to instantiate at render time. Karma supports loading all file formats understood by Houdini."], "extent": [3067, 3226]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["VDB File"], "extent": [3226, 3236], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Type"]}, " is ", {"type": "q", "text": ["VDB Iso Surface"]}, ", the file path to the VDB file to instantiate at render time."], "extent": [3236, 3339]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [3339, 3348], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/karma", "type": "link", "text": "", "fullpath": "/nodes/lop/karma.html"}], "extent": [3348, 3370]}], "container": true}], "text": "Related"}], "title": ["Karma Procedural"], "summary": ["Sets up render-time instantiation for Karma."], "included": ["/nodes/lop/_snippet_token"]}