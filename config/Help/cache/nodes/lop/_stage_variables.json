{"type": "root", "attrs": {"type": "include"}, "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Stage Variable Count"], "extent": [16, 38], "body": [{"type": "para", "indent": 8, "text": ["Every USD layer can contain a dictionary of ", {"type": "q", "text": ["stage variables"]}, " as metadata onthe root primitive. These stage variables can be referenced in asset path attributes, composition arcs such as references, and in variant selections."], "extent": [38, 273]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Stage Variable Name"], "extent": [273, 294], "body": [{"type": "para", "indent": 8, "text": ["For each stage variable, the name of the variable."], "extent": [294, 354]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Stage Variable Type"], "extent": [354, 375], "body": [{"type": "para", "indent": 8, "text": ["For each stage variable, the data type of the variable value."], "extent": [375, 446]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["String"], "extent": [446, 462], "body": [{"type": "para", "indent": 16, "text": ["The value is stored as a single string."], "extent": [462, 519]}], "container": true}, {"type": "dt", "indent": 8, "text": ["String Array"], "extent": [519, 541], "body": [{"type": "para", "indent": 16, "text": ["The value is parsed into an array of substring, respecting quotes to group space separated words into a single substring."], "extent": [541, 680]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Token"], "extent": [680, 695], "body": [{"type": "para", "indent": 16, "text": ["Like a string, but represented as a USD Token, which generally should not contain spaces. Using this specific data type may be necessary to match scripts or tools later in your pipeline."], "extent": [695, 899]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Token Array"], "extent": [899, 920], "body": [{"type": "para", "indent": 16, "text": ["Like a string array, but because USD Tokens generally aren\u2019t expected to have spaces, the string is parsed into tokens using a simpler algorithm which ignores quotes and always splits the string where there is whitespace."], "extent": [920, 1159]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Float"], "extent": [1159, 1174], "body": [{"type": "para", "indent": 16, "text": ["The value is stored as a floating point number."], "extent": [1174, 1239]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Integer"], "extent": [1239, 1256], "body": [{"type": "para", "indent": 16, "text": ["The value is stored as a whole integer value."], "extent": [1256, 1319]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Boolean"], "extent": [1319, 1336], "body": [{"type": "para", "indent": 16, "text": ["The value is stored as a True or False value."], "extent": [1336, 1399]}], "container": true}], "container": true}], "container": true}, {"type": "dt", "indent": 0, "text": ["Stage Variable Value"], "extent": [1399, 1421], "body": [{"type": "para", "indent": 8, "text": ["For each stage variable, the value to associate with the name."], "extent": [1421, 1493]}, {"type": "para", "indent": 8, "text": ["(Behind the scenes there are several different parameters (", {"type": "code", "text": ["stagevariablestrvalue", {"type": "var", "text": ["n"]}]}, ", ", {"type": "code", "text": ["stagevariablefloatvalue", {"type": "var", "text": ["n"]}]}, ", ", {"type": "code", "text": ["stagevariableintvalue", {"type": "var", "text": ["n"]}]}, ", ", {"type": "code", "text": ["stagevariableboolvalue", {"type": "var", "text": ["n"]}]}, ") all labeled ", {"type": "ui", "text": ["Stage variable value"]}, ", with the visible one controlled by the ", {"type": "ui", "text": ["Stage variable type"]}, " value. This may be relevant if you are using expressions or scripting these values.)"], "extent": [1493, 1870]}], "container": true}], "container": true}]}