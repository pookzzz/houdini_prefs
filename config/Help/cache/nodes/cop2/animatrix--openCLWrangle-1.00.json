{"type": "root", "attrs": {"type": "node", "context": "cop", "internal": "openCLWrangle", "icon": "/nodes/cop2/animatrix--openCLWrangle-1.00/icon64.svg", "version": "1.00", "namespace": "animatrix"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["OpenCL Wrangle"], "extent": [0, 19]}, {"type": "summary", "indent": 0, "text": ["Runs an OpenCL kernel as part of your COP network. Depending on the GPU, OpenCL can be orders of magnitude faster than even C++."], "extent": [102, 240]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [240, 252], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Kernel"], "extent": [252, 266], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Kernel Name"], "extent": [266, 281], "body": [{"type": "para", "indent": 4, "text": ["The name of the OpenCL kernel to execute with the loaded program."], "extent": [301, 372]}], "container": true, "attrs": {"id": "kernelname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Code Snippet"], "extent": [372, 390], "body": [{"type": "para", "indent": 4, "text": ["Use the code provided in the Kernel Code parameter rather than an external disk file. This makes for quicker editing and creation of OpenCL SOPs."], "extent": [407, 562]}], "container": true, "attrs": {"id": "usecode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Kernel Code"], "extent": [562, 575], "body": [{"type": "para", "indent": 4, "text": ["OpenCL code to execute."], "extent": [589, 618]}], "container": true, "attrs": {"id": "code"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Kernel Options"], "extent": [618, 634], "body": [{"type": "para", "indent": 4, "text": ["Specify any desired compile flags for the kernel."], "extent": [657, 716]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [716, 726], "body": [{"type": "para", "indent": 8, "text": ["The Apple OSX OpenCL compiler requires only a single space between kernel options!"], "extent": [726, 826]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "kerneloptions"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Generate Kernel"], "extent": [826, 843], "body": [{"type": "para", "indent": 4, "text": ["Creates a prototype for the required kernel function taking all of your current selected parameters into account. This can be used as a starting point or to update your interface when new parameters are added or removed."], "extent": [867, 1093]}], "container": true, "attrs": {"id": "generatekernel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Recompile Kernel"], "extent": [1093, 1111], "body": [{"type": "para", "indent": 4, "text": ["When loading kernels from disk the kernel is cached to avoid regenerating it every solve. Turning this on forces the re-loading and recompiling of the kernel. This is useful if #include files refer to code that has changed, or the kernel file is changed in an external text editor."], "extent": [1130, 1417]}, {"type": "para", "indent": 4, "text": ["It should always be disabled when protoyping is complete."], "extent": [1417, 1480]}], "container": true, "attrs": {"id": "recompile"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Options"], "extent": [1480, 1494], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Finish Kernels"], "extent": [1494, 1511], "body": [{"type": "para", "indent": 4, "text": ["When Finish Kernels is disabled, no attempt is to wait for the OpenCL kernels to complete before continuing the next solver. This lets them run in the background until their results are actually needed. To simplify debugging, it is useful to ensure kernels are finished to make sure errors are detected in the right spot."], "extent": [1527, 1858]}], "container": true, "attrs": {"id": "finish"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Time"], "extent": [1858, 1872], "body": [{"type": "para", "indent": 4, "text": ["Include the current simulation time as a parameter."], "extent": [1886, 1947]}], "container": true, "attrs": {"id": "time"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Time Step"], "extent": [1947, 1966], "body": [{"type": "para", "indent": 4, "text": ["Include the current timestep as a parameter. This is useful as if the OpenCL node is triggered from a Gas Substep it may be less than the full timestep."], "extent": [1983, 2145]}], "container": true, "attrs": {"id": "timeinc"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Scale"], "extent": [2145, 2157], "body": [{"type": "para", "indent": 4, "text": ["For some operations you may wish to know the power of the timestep. Rather than recomputing in the kernel, you can set this to e^Timestep and have the exponentiation pre-computed."], "extent": [2176, 2365]}], "container": true, "attrs": {"id": "timescale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Method"], "extent": [2365, 2378], "body": [{"type": "para", "indent": 4, "text": ["Whether you want Timestep or e^Timestep."], "extent": [2398, 2444]}], "container": true, "attrs": {"id": "timemethod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Simplex Noise Data"], "extent": [2444, 2472], "body": [{"type": "para", "indent": 4, "text": ["Include an opaque pointer that can be passed to the simplex noise functions in <xnoise.h> to generate simplex noise and curlnoise from OpenCL kernels."], "extent": [2488, 2645]}], "container": true, "attrs": {"id": "xnoise"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}], "title": ["OpenCL Wrangle"], "summary": ["Runs an OpenCL kernel as part of your COP network. Depending on the GPU, OpenCL can be orders of magnitude faster than even C++."]}