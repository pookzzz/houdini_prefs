// Magic: bbb019f1
// Automatically generated PSI dialog (PSI version 20.5.278)
// Thu Nov 28 11:23:45 2024


f_tmp = FLOAT_FIELD;	// dialog.top.ui

group.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    group.label = PARM_LABEL("Group", "group") WIDTH(1.5);
    PARM_FIELD(string, "group") VALUE(group.val) 
	LABELREF(group.label) HSTRETCH;

    group.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    ACTION_ICONBUTTON "BUTTONS_reselect" VALUE(group.script_action)
	HELP("Select geometry from an available viewport.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    { WIDTH(0.1) }
}

grouptype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    grouptype.label = PARM_LABEL_SIMPLE("Group Type", "grouptype") WIDTH(1.5);
    { WIDTH(0.09) }

    grouptype.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

jitterattrib.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    jitterattrib.label = PARM_LABEL("Position Attribute", "jitterattrib") WIDTH(1.5);
    PARM_FIELD(string, "jitterattrib") VALUE(jitterattrib.val) 
	LABELREF(jitterattrib.label) HSTRETCH;

    jitterattrib.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    { WIDTH(0.1) }
}

scale.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 scale.label = PARM_LABEL("Scale", "scale") WIDTH(1.5);
 PARM(float, 1, "scale", none, none) RANGE(0,4)
	 LABELREF(scale.label) HSTRETCH;

  { WIDTH(0.1) }
}
axisscale.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

axisscale.gad = ROW 
{
    HSTRETCH
   {  }

    axisscale.label = PARM_LABEL("Axis Scales", "axisscale") WIDTH(1.5);
    PARM(float, 3, "axisscale", none, none) LABELREF(axisscale.label)
	HSTRETCH;

   {  }
}

axisscale_menu.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)
    {  }

    axisscale_menu.menu LOOK(menuiconbutton) SIZE(0.26, 0.26);

}
}	// Template join.bot


mode.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    mode.label = PARM_LABEL_SIMPLE("Mode", "mode") WIDTH(1.5);
    { WIDTH(0.09) }

    mode.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}
usepscale.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE
usepscale.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0) NO_MARGIN_SPACING_SCALE

usepscale.gad = PARM_BUTTON("usepscale", "") toggle VALUE(usepscale.val) RETAIN_SIZE_WHEN_HIDDEN;

pscalename.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    pscalename.label = PARM_LABEL("PScale Attribute", "pscalename") WIDTH(1.32);
    PARM_FIELD(string, "pscalename") VALUE(pscalename.val) 
	LABELREF(pscalename.label) HSTRETCH;

    pscalename.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    {  }
}
}	

pscaleinvert.gad = ROW
{
    
    {  }

    PARM_BUTTON("pscaleinvert", "Invert") toggle VALUE(pscaleinvert.val);

    {  }

    {  }
}
}	// Template join.bot


pscaleexp.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 pscaleexp.label = PARM_LABEL("Exponent", "pscaleexp") WIDTH(1.5);
 PARM(float, 1, "pscaleexp", none, none) RANGE(0.1,4)
	 LABELREF(pscaleexp.label) HSTRETCH;

  { WIDTH(0.1) }
}

uselocalv.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("uselocalv", "VEXpressions") toggle VALUE(uselocalv.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

localvexpression.gad = ROW
{

    LAYOUT(overlap) HSTRETCH JUSTIFY(right, top)
    HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

    {
	LAYOUT(horizontal) JUSTIFY(right, top)

    ACTION_ICONBUTTON "BUTTONS_create_parm_from_ch" VALUE(localvexpression.script_action)
	HELP("Creates spare parameters for each unique call of ch()")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    localvexpression.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    }

    {
	LAYOUT(vertical) HSTRETCH JUSTIFY(left, top)

	localvexpression.label = PARM_LABEL("VEXpression", "localvexpression");
	{ HEIGHT(0.06) }

        localvexpression.field = MULTILINE_PARM_FIELD ("localvexpression")
	    LABELREF(localvexpression.label)
	    VALUE(localvexpression.val)
	    SYNTAX("vex")
	    LINES(5,12)
	    HSTRETCH;
    }

}

axisranges_menu.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    axisranges_menu.label = PARM_LABEL_SIMPLE("Axis Range Presets", "axisranges_menu") WIDTH(1.5);
    { WIDTH(0.09) }

    axisranges_menu.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

axisrangemin.gad = ROW 
{
    HSTRETCH
   { WIDTH(0.18) }

    axisrangemin.label = PARM_LABEL("Axis Range Min", "axisrangemin") WIDTH(1.5);
    PARM(float, 3, "axisrangemin", none, none) LABELREF(axisrangemin.label)
	HSTRETCH;

   { WIDTH(0.1) }
}

axisrangemax.gad = ROW 
{
    HSTRETCH
   { WIDTH(0.18) }

    axisrangemax.label = PARM_LABEL("Axis Range Max", "axisrangemax") WIDTH(1.5);
    PARM(float, 3, "axisrangemax", none, none) LABELREF(axisrangemax.label)
	HSTRETCH;

   { WIDTH(0.1) }
}

useaxisvectors.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("useaxisvectors", "Use Axis Vectors") toggle VALUE(useaxisvectors.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
vectypex.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

vectypex.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    vectypex.label = PARM_LABEL_SIMPLE("X Axis", "vectypex") WIDTH(1.5);
    { WIDTH(0.09) }

    vectypex.menu;

    {  }

    {  }
}

attribx.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    PARM_FIELD(string, "attribx") VALUE(attribx.val) HSTRETCH;

    attribx.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    {  }
}
}	// Template join.bot

vectypey.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

vectypey.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    vectypey.label = PARM_LABEL_SIMPLE("Y Axis", "vectypey") WIDTH(1.5);
    { WIDTH(0.09) }

    vectypey.menu;

    {  }

    {  }
}

attriby.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    PARM_FIELD(string, "attriby") VALUE(attriby.val) HSTRETCH;

    attriby.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    {  }
}
}	// Template join.bot

vectypez.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

vectypez.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    vectypez.label = PARM_LABEL_SIMPLE("Z Axis", "vectypez") WIDTH(1.5);
    { WIDTH(0.09) }

    vectypez.menu;

    {  }

    {  }
}

attribz.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    PARM_FIELD(string, "attribz") VALUE(attribz.val) HSTRETCH;

    attribz.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    {  }
}
}	// Template join.bot


substep.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 substep.label = PARM_LABEL("Sub Steps", "substep") WIDTH(1.5);
 PARM(float, 1, "substep", none, none) RANGE(0,10)
	 LABELREF(substep.label) HSTRETCH;

  { WIDTH(0.1) }
}
scale_menu.gad = NULL { }
seed.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

seed.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 seed.label = PARM_LABEL("Seed", "seed") WIDTH(1.5);
 PARM(float, 1, "seed", none, none) RANGE(0,9999)
	 LABELREF(seed.label) HSTRETCH;

  {  }
}

seed_menu.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)
    {  }

    seed_menu.menu LOOK(menuiconbutton) SIZE(0.26, 0.26);

}
}	// Template join.bot

useidattrib.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE
useidattrib.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0) NO_MARGIN_SPACING_SCALE

useidattrib.gad = PARM_BUTTON("useidattrib", "") toggle VALUE(useidattrib.val) RETAIN_SIZE_WHEN_HIDDEN;

idattrib.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    idattrib.label = PARM_LABEL("Id Attribute", "idattrib") WIDTH(1.32);
    PARM_FIELD(string, "idattrib") VALUE(idattrib.val) 
	LABELREF(idattrib.label) HSTRETCH;

    idattrib.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    {  }
}
}	
}	// Template join.bot


uselocalseedv.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("uselocalseedv", "VEXpressions") toggle VALUE(uselocalseedv.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

localseedvexpression.gad = ROW
{

    LAYOUT(overlap) HSTRETCH JUSTIFY(right, top)
    HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE

    {
	LAYOUT(horizontal) JUSTIFY(right, top)

    ACTION_ICONBUTTON "BUTTONS_create_parm_from_ch" VALUE(localseedvexpression.script_action)
	HELP("Creates spare parameters for each unique call of ch()")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    localseedvexpression.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    }

    {
	LAYOUT(vertical) HSTRETCH JUSTIFY(left, top)

	localseedvexpression.label = PARM_LABEL("VEXpression", "localseedvexpression");
	{ HEIGHT(0.06) }

        localseedvexpression.field = MULTILINE_PARM_FIELD ("localseedvexpression")
	    LABELREF(localseedvexpression.label)
	    VALUE(localseedvexpression.val)
	    SYNTAX("vex")
	    LINES(5,10)
	    HSTRETCH;
    }

}
b_time_setup2.gad = NULL { }

folder2.gad = 

GROUP simple "Seed" flat 
{ 
    VALUE(folder2.gad.val) LAYOUT(vertical) HSTRETCH 
	    seed.row.join;		
	    useidattrib.row.join;		
	    uselocalseedv.gad;		
	    localseedvexpression.gad;		
} 

folder0_1.gad = 
GROUP collapsible "Axis Settings" flat   
{
    VALUE(folder0_1.gad.val) LAYOUT(vertical) HSTRETCH
	    axisranges_menu.gad;		
	    axisrangemin.gad;		
	    axisrangemax.gad;		
	    useaxisvectors.gad;		
	    vectypex.row.join;		
	    vectypey.row.join;		
	    vectypez.row.join;		
	    substep.gad;		
} 

folder0.gad = 

GROUP simple "Jitter" flat 
{ 
    VALUE(folder0.gad.val) LAYOUT(vertical) HSTRETCH 
	    jitterattrib.gad;		
	    scale.gad;		
	    axisscale.row.join;		
	    mode.gad;		
	    usepscale.row.join;		
	    pscaleexp.gad;		
	    uselocalv.gad;		
	    localvexpression.gad;		
	    folder0_1.gad;		
	    scale_menu.gad;		
	    folder2.gad;		
} 

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH 
    group.gad; 
    grouptype.gad; 
    folder0.gad; 
    b_time_setup2.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val_) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
